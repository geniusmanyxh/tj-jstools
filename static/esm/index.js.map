{"version":3,"file":"index.js","sources":["../../src/common/paramUtils.ts","../../src/type_tool/basic/index.ts","../../src/type_tool/numDel/index.ts","../../src/type_tool/objDel/index.ts","../../src/type_tool/complexFun/index.ts","../../src/url_tool/index.ts","../../node_modules/js-cookie/dist/js.cookie.mjs","../../src/storage_tool/index.ts","../../src/str_tool/simpleStrFun/index.ts","../../src/common/RegExpMap.ts","../../src/str_tool/DTMoblie/index.ts","../../src/browser_tool/screen/index.ts","../../src/browser_tool/scroll/index.ts","../../src/arr_tool/TreeData/index.ts","../../src/num_tool/formatChineseRMB/index.ts","../../src/num_tool/numberThousandsFormat/index.ts"],"sourcesContent":["function paramsNullError(prefix = \"\", customTxt?: string) {\n  let deaInfo = \"参数不能为空！\";\n  if (prefix) {\n    deaInfo = prefix + deaInfo;\n  }\n  if (customTxt) {\n    deaInfo = customTxt;\n  }\n  console.error(deaInfo);\n  throw Error(deaInfo);\n}\n\nexport { paramsNullError };\n","import { paramsNullError } from \"../../common/paramUtils\";\n\nconst isBasicType = function isType(type: string) {\n  const params = String(type).toLocaleLowerCase();\n  return function basicType(value: unknown): boolean {\n    if (arguments.length === 0) {\n      paramsNullError(`is${type}方法的`);\n    }\n\n    return typeof value === params;\n  };\n};\nfunction isJson(value: unknown): boolean {\n  if (arguments.length === 0) {\n    paramsNullError(`isJson方法的`);\n  }\n  if (typeof value === \"string\") {\n    try {\n      const obj = JSON.parse(value);\n      if (typeof obj == \"object\" && obj) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"error：\" + value + \"!!!\" + e);\n      return false;\n    }\n  }\n  return false;\n}\nconst isBoolean = isBasicType(\"Boolean\");\nconst isNumber = isBasicType(\"Number\");\nconst isString = isBasicType(\"String\");\nconst isUndefined = isBasicType(\"Undefined\");\nconst isSymbol = isBasicType(\"Symbol\");\nconst isBigint = isBasicType(\"Bigint\");\nexport {\n  isBoolean,\n  isNumber,\n  isString,\n  isUndefined,\n  isSymbol,\n  isBigint,\n  isJson,\n};\n","import { paramsNullError } from \"../../common/paramUtils\";\n\nfunction isNumType(name: string, type: string) {\n  return function (value: unknown): boolean {\n    if (arguments.length === 0) {\n      paramsNullError(`is${name}方法的`);\n    }\n    const flag = typeof value === \"number\";\n    return flag && Number[`is${type}`](value);\n  };\n}\n\nfunction isFloat(params: unknown): boolean {\n  if (arguments.length === 0) {\n    paramsNullError(`isFloat方法的`);\n  }\n  const flag = typeof params === \"number\";\n  const y = String(params).indexOf(\".\") + 1; // 获取小数点后的个数\n\n  return flag && y > 0;\n}\n\nfunction isInfinite(params: unknown): boolean {\n  if (arguments.length === 0) {\n    paramsNullError(`isInfinite方法的`);\n  }\n  const flag = typeof params === \"number\";\n  return flag && !Number.isFinite(params) && !Number.isNaN(params);\n}\n\nconst isInt = isNumType(\"Int\", \"Integer\");\nconst isFinite = isNumType(\"Finite\", \"Finite\");\nconst isNaN = isNumType(\"NaN\", \"NaN\");\n\nexport { isFloat, isInt, isFinite, isNaN, isInfinite };\n","import { paramsNullError } from \"../../common/paramUtils\";\n\nconst objTypeMap = {\n  nullT: \"[object Null]\",\n  ObjectT: \"[object Object]\",\n  ArrayT: \"[object Array]\",\n  DateT: \"[object Date]\",\n  FunctionT: \"[object Function]\",\n};\n\nfunction isObjType(name: string, type: string) {\n  return function (value: unknown): boolean {\n    if (arguments.length === 0) {\n      paramsNullError(`is${name}方法的`);\n    }\n    const pType = Object.prototype.toString.call(value);\n    return pType === type;\n  };\n}\n\nconst isNull = isObjType(\"Null\", objTypeMap.nullT);\nconst isArray = isObjType(\"Array\", objTypeMap.ArrayT);\nconst isObject = isObjType(\"Object\", objTypeMap.ObjectT);\nconst isDate = isObjType(\"Date\", objTypeMap.DateT);\nconst isFunction = isObjType(\"Function\", objTypeMap.FunctionT);\n\nexport { isNull, isArray, isDate, isFunction, isObject };\n","import * as numT from \"../numDel\";\nimport * as objT from \"../objDel\";\nimport { paramsNullError } from \"../../common/paramUtils\";\n\ntype returnTypeStr =\n  | \"string\"\n  | \"bigint\"\n  | \"boolean\"\n  | \"symbol\"\n  | \"undefined\"\n  | \"object\"\n  | \"function\"\n  | \"array\"\n  | \"object\"\n  | \"date\"\n  | \"null\"\n  | \"int\"\n  | \"float\"\n  | \"infinite\"\n  | \"NaN\";\n\ntype arrayTypeDetail = {\n  index: string | number;\n  value: any;\n  type: returnTypeStr;\n};\n\ntype objectTypeDetail = {\n  key: string;\n  value: any;\n  type: returnTypeStr;\n};\n\n// 定义一个typeof可以直接判断出来的单一类型数组\nconst simpleTypeArr = [\n  \"string\",\n  \"bigint\",\n  \"boolean\",\n  \"symbol\",\n  \"undefined\",\n  \"function\",\n];\n\nfunction getType(params: unknown): returnTypeStr {\n  if (arguments.length === 0) {\n    console.warn(\"getType方法没有接收到参数,返回的类型为undefined\");\n    return \"undefined\";\n  }\n  let rtnStr: returnTypeStr | \"number\" = \"string\";\n  const typeStr: returnTypeStr | \"number\" = typeof params;\n  const typeFlag = simpleTypeArr.includes(typeStr);\n\n  if (typeFlag) {\n    rtnStr = typeStr;\n  } else {\n    if (typeStr === \"number\") {\n      if (numT.isInt(params)) {\n        rtnStr = \"int\";\n      } else if (numT.isFloat(params)) {\n        rtnStr = \"float\";\n      } else if (numT.isNaN(params)) {\n        rtnStr = \"NaN\";\n      } else if (numT.isInfinite(params)) {\n        rtnStr = \"infinite\";\n      }\n    } else if (typeStr === \"object\") {\n      if (objT.isNull(params)) {\n        rtnStr = \"null\";\n      } else if (objT.isObject(params)) {\n        rtnStr = \"object\";\n      } else if (objT.isArray(params)) {\n        rtnStr = \"array\";\n      } else if (objT.isFunction(params)) {\n        rtnStr = \"function\";\n      } else if (objT.isDate(params)) {\n        rtnStr = \"date\";\n      }\n    }\n  }\n\n  return rtnStr as returnTypeStr;\n}\n\nfunction getArrayAllType(params: any[]): returnTypeStr[] {\n  if (!objT.isArray(params)) {\n    paramsNullError(\"\", \"getArrayAllType方法接收的参数应该是一个数组\");\n  }\n  const rtnArr: returnTypeStr[] = [];\n  if (arguments.length > 0 && params.length > 0) {\n    for (let i = 0; i < params.length; i++) {\n      const val = params[i];\n      rtnArr.push(getType(val));\n    }\n  }\n  return rtnArr;\n}\n\nfunction getArrayTypeDetail(\n  params: any[],\n  selectType?: returnTypeStr | \"number\"\n): arrayTypeDetail[] {\n  if (!objT.isArray(params)) {\n    paramsNullError(\"\", \"getArrayTypeDetail方法接收的参数应该是一个数组\");\n  }\n  let resArr: arrayTypeDetail[] = [];\n  if (arguments.length > 0) {\n    const selectArr: arrayTypeDetail[] = [];\n    const allArr: arrayTypeDetail[] = [];\n\n    for (let i = 0; i < params.length; i++) {\n      const index = i;\n      const value = params[i];\n      const type: returnTypeStr = getType(value);\n\n      allArr.push({ index, value, type });\n\n      if (selectType) {\n        if (selectType === \"number\" && [\"int\", \"float\"].includes(type)) {\n          selectArr.push({ index, value, type });\n        } else if (selectType === type) {\n          selectArr.push({ index, value, type });\n        }\n        continue;\n      }\n    }\n\n    if (selectType) {\n      resArr = [...selectArr];\n    } else {\n      resArr = [...allArr];\n    }\n  }\n\n  return resArr;\n}\n\nfunction getObjectAllType(params: object): returnTypeStr[] {\n  if (!objT.isObject(params)) {\n    paramsNullError(\"\", \"getObjectAllType方法接收的参数应该是一个对象\");\n  }\n  const resArr: returnTypeStr[] = [];\n  if (arguments.length > 0) {\n    for (const key in params) {\n      if (Object.hasOwnProperty.call(params, key)) {\n        const val = params[key];\n        resArr.push(getType(val));\n      }\n    }\n  }\n\n  return resArr;\n}\n\nfunction getObjectTypeDetail(\n  params: object,\n  selectType?: returnTypeStr | \"number\"\n): objectTypeDetail[] {\n  if (!objT.isObject(params)) {\n    paramsNullError(\"\", \"getObjectTypeDetail方法接收的参数应该是一个对象\");\n  }\n  let resArr: objectTypeDetail[] = [];\n  if (arguments.length > 0) {\n    const selectArr: objectTypeDetail[] = [];\n    const allArr: objectTypeDetail[] = [];\n\n    for (const key in params) {\n      if (Object.hasOwnProperty.call(params, key)) {\n        const value = params[key];\n        const type = getType(value);\n\n        allArr.push({ key, value, type });\n\n        if (selectType) {\n          if (selectType === \"number\" && [\"int\", \"float\"].includes(type)) {\n            selectArr.push({ key, value, type });\n          } else if (selectType === type) {\n            selectArr.push({ key, value, type });\n          }\n        }\n        continue;\n      }\n    }\n\n    if (selectType) {\n      resArr = [...selectArr];\n    } else {\n      resArr = [...allArr];\n    }\n  }\n\n  return resArr;\n}\n\nexport {\n  getType,\n  getArrayAllType,\n  getArrayTypeDetail,\n  getObjectAllType,\n  getObjectTypeDetail,\n};\n","import { paramsNullError } from \"../common/paramUtils\";\ninterface IParamsType {\n  [key: string]: string;\n}\n\ntype parseUrlType = \"splitType\" | \"URLSearchParamsType\" | \"RegExpType\";\ntype decodeUrlType = \"noneType\" | \"decodeURIType\" | \"decodeURIComponentType\";\ntype encodeUrlType = \"noneType\" | \"encodeURIType\" | \"encodeURIComponentType\";\ninterface IParseUrlFunction {\n  [key: string]: (url: string) => IParamsType;\n}\n\nconst ParseUrlFunction: IParseUrlFunction = {\n  splitType: getUrlParamsOfSplit,\n  URLSearchParamsType: getUrlParamsOfURLSearchParams,\n  RegExpType: getUrlParamsOfRegExp,\n};\n\nconst DecodeUrlType = {\n  noneType: (url: string) => url,\n  decodeURIType: decodeURI,\n  decodeURIComponentType: decodeURIComponent,\n};\n\nconst EncodeUrlType = {\n  noneType: (url: string) => url,\n  encodeURIType: encodeURI,\n  encodeURIComponent: encodeURIComponent,\n};\n\ninterface IConverParamsConfig {\n  url: string;\n  hashValue: string;\n  encodeUrlType: encodeUrlType;\n}\n\nconst ConverParamsConfig: IConverParamsConfig = {\n  url: globalThis?.location?.href,\n  hashValue: \"\",\n  encodeUrlType: \"noneType\",\n};\n\ninterface IGetUrlParamsConfig {\n  url: string;\n  parseUrlType: parseUrlType;\n  decodeUrlType: decodeUrlType;\n}\nconst config: IGetUrlParamsConfig = {\n  url: globalThis?.location?.search,\n  parseUrlType: \"splitType\",\n  decodeUrlType: \"noneType\",\n};\nfunction getUrlParams(): IParamsType;\nfunction getUrlParams(key?: string): string;\nfunction getUrlParams(options?: IGetUrlParamsConfig): IParamsType;\nfunction getUrlParams(\n  key?: string,\n  options?: IGetUrlParamsConfig\n): IParamsType | string;\n\nfunction getUrlParams(\n  key?: unknown,\n  options?: IGetUrlParamsConfig\n): IParamsType | string {\n  let paramsObj = {};\n  let opt: IGetUrlParamsConfig = config;\n  let keyStr = \"\";\n  let urlStr = \"\";\n\n  if (typeof arguments[0] === \"string\") {\n    keyStr = arguments[0];\n  } else if (typeof arguments[0] === \"object\") {\n    opt = { ...config, ...arguments[0] };\n  }\n\n  if (typeof arguments[1] === \"object\") {\n    opt = { ...config, ...arguments[1] };\n  }\n  urlStr = DecodeUrlType[opt.decodeUrlType](opt.url);\n\n  if (urlStr.includes(\"?\")) {\n    const urlArr: string[] = urlStr.split(\"?\");\n    if (urlArr[1].includes(\"#\")) {\n      urlStr = \"?\" + urlArr[1].substring(0, urlArr[1].lastIndexOf(\"#\"));\n    }\n  }\n  paramsObj = ParseUrlFunction[opt.parseUrlType](urlStr);\n\n  if (keyStr) {\n    return paramsObj[keyStr];\n  }\n\n  return paramsObj;\n}\n\nfunction converParamsToUrl(urlParams: object): string;\nfunction converParamsToUrl(\n  urlParams: object,\n  options?: IConverParamsConfig\n): string;\n\nfunction converParamsToUrl(\n  urlParams: object,\n  options?: IConverParamsConfig\n): string {\n  if (arguments.length === 0) {\n    paramsNullError(\"converParamsToUrl方法的\");\n  }\n  let urlStr = \"\";\n  const paramsArr: string[] = [];\n  let opt: IConverParamsConfig = ConverParamsConfig;\n\n  if (options) {\n    opt = { ...opt, ...options };\n  }\n\n  if (Object.prototype.toString.call(urlParams) === \"[object Object]\") {\n    Object.entries(urlParams).forEach(([key, value]) => {\n      const param = key + \"=\" + EncodeUrlType[opt.encodeUrlType](value);\n      paramsArr.push(param);\n    });\n  } else {\n    console.warn(\"拼接ur的参数格式必须是一个对象类型的数据！\");\n  }\n\n  if (opt.url.includes(\"?\")) {\n    const urlArr: string[] = opt.url.split(\"?\");\n    console.log(urlArr);\n    if (urlArr[1].includes(\"#\")) {\n      urlStr =\n        urlArr[0] + \"?\" + urlArr[1].substring(0, urlArr[1].lastIndexOf(\"#\"));\n\n      if (!opt.hashValue.trim()) {\n        opt.hashValue = urlArr[1].substring(urlArr[1].lastIndexOf(\"#\"));\n      }\n    }\n    if (paramsArr.length > 0) {\n      const oldParamsObj: IParamsType = getUrlParamsOfSplit(urlStr);\n      const newParamsObj: IParamsType = { ...oldParamsObj, ...urlParams };\n      const newParamsArr: string[] = [];\n\n      Object.entries(newParamsObj).forEach(([key, value]) => {\n        const param = key + \"=\" + EncodeUrlType[opt.encodeUrlType](value);\n        newParamsArr.push(param);\n      });\n      console.log(newParamsArr);\n      urlStr = urlArr[0] + \"?\" + newParamsArr.join(\"&\") + opt.hashValue;\n    } else {\n      urlStr = opt.url + opt.hashValue;\n    }\n  } else {\n    if (opt.url.includes(\"#\")) {\n      if (!opt.hashValue.trim()) {\n        opt.hashValue = opt.url.substring(opt.url.lastIndexOf(\"#\"));\n      }\n      opt.url = opt.url.substring(0, opt.url.lastIndexOf(\"#\"));\n    }\n    if (paramsArr.length > 0) {\n      urlStr = opt.url + \"?\" + paramsArr.join(\"&\") + opt.hashValue;\n    } else {\n      urlStr = opt.url + opt.hashValue;\n    }\n  }\n\n  return urlStr;\n}\n\nexport { getUrlParams, converParamsToUrl };\n\nfunction getUrlParamsOfSplit(url: string): IParamsType {\n  // 通过 ? 分割获取后面的参数字符串\n  const urlStr = url.split(\"?\")[1];\n  // 创建空对象存储参数\n  const obj = {};\n  if (!urlStr) {\n    return obj;\n  }\n  // 再通过 & 将每一个参数单独分割出来\n  const paramsArr = urlStr.split(\"&\");\n  for (let i = 0, len = paramsArr.length; i < len; i++) {\n    // 再通过 = 将每一个参数分割为 key:value 的形式\n    const arr = paramsArr[i].split(\"=\");\n    obj[arr[0]] = arr[1];\n  }\n  return obj;\n}\n\nfunction getUrlParamsOfURLSearchParams(url: string): IParamsType {\n  const urlStr = url.split(\"?\")[1];\n  const urlSearchParams = new URLSearchParams(urlStr);\n  const result = Object.fromEntries(urlSearchParams.entries());\n  return result;\n}\n\nfunction getUrlParamsOfRegExp(url: string): IParamsType {\n  // \\w+ 表示匹配至少一个(数字、字母及下划线), [\\u4e00-\\u9fa5]+ 表示匹配至少一个中文字符\n  const pattern = /(\\w+|[\\u4e00-\\u9fa5]+)=(\\w+|[\\u4e00-\\u9fa5]+)/gi;\n  const result = {};\n  url.replace(pattern, ($, $1, $2) => {\n    result[$1] = $2;\n    return \"\";\n  });\n  return result;\n}\n","/*! js-cookie v3.0.1 | MIT */\n/* eslint-disable no-var */\nfunction assign (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target\n}\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\nvar defaultConverter = {\n  read: function (value) {\n    if (value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n  },\n  write: function (value) {\n    return encodeURIComponent(value).replace(\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n      decodeURIComponent\n    )\n  }\n};\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\n\nfunction init (converter, defaultAttributes) {\n  function set (key, value, attributes) {\n    if (typeof document === 'undefined') {\n      return\n    }\n\n    attributes = assign({}, defaultAttributes, attributes);\n\n    if (typeof attributes.expires === 'number') {\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n    }\n    if (attributes.expires) {\n      attributes.expires = attributes.expires.toUTCString();\n    }\n\n    key = encodeURIComponent(key)\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    var stringifiedAttributes = '';\n    for (var attributeName in attributes) {\n      if (!attributes[attributeName]) {\n        continue\n      }\n\n      stringifiedAttributes += '; ' + attributeName;\n\n      if (attributes[attributeName] === true) {\n        continue\n      }\n\n      // Considers RFC 6265 section 5.2:\n      // ...\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n      //     character:\n      // Consume the characters of the unparsed-attributes up to,\n      // not including, the first %x3B (\";\") character.\n      // ...\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n    }\n\n    return (document.cookie =\n      key + '=' + converter.write(value, key) + stringifiedAttributes)\n  }\n\n  function get (key) {\n    if (typeof document === 'undefined' || (arguments.length && !key)) {\n      return\n    }\n\n    // To prevent the for loop in the first place assign an empty array\n    // in case there are no cookies at all.\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\n    var jar = {};\n    for (var i = 0; i < cookies.length; i++) {\n      var parts = cookies[i].split('=');\n      var value = parts.slice(1).join('=');\n\n      try {\n        var foundKey = decodeURIComponent(parts[0]);\n        jar[foundKey] = converter.read(value, foundKey);\n\n        if (key === foundKey) {\n          break\n        }\n      } catch (e) {}\n    }\n\n    return key ? jar[key] : jar\n  }\n\n  return Object.create(\n    {\n      set: set,\n      get: get,\n      remove: function (key, attributes) {\n        set(\n          key,\n          '',\n          assign({}, attributes, {\n            expires: -1\n          })\n        );\n      },\n      withAttributes: function (attributes) {\n        return init(this.converter, assign({}, this.attributes, attributes))\n      },\n      withConverter: function (converter) {\n        return init(assign({}, this.converter, converter), this.attributes)\n      }\n    },\n    {\n      attributes: { value: Object.freeze(defaultAttributes) },\n      converter: { value: Object.freeze(converter) }\n    }\n  )\n}\n\nvar api = init(defaultConverter, { path: '/' });\n/* eslint-enable no-var */\n\nexport default api;\n","import Cookies from \"js-cookie\";\nimport { isUndefined, isJson, isString } from \"../type_tool/basic\";\nimport { isObject } from \"../type_tool/objDel\";\n\ntype UnitTimeType = \"ms\" | \"s\" | \"min\" | \"h\" | \"d\" | \"w\" | \"m\" | \"y\";\ntype IFormatUnitTime = {\n  [key in UnitTimeType]: number;\n};\ntype StorageType = \"cookie\" | \"local\" | \"session\";\n\ntype StorageInstanceType = {\n  [key in StorageType]: Cookies.CookiesStatic | Storage;\n};\n\ninterface IComStorageBasicProp {\n  prefix?: string;\n  suffix?: string;\n  linkSign?: string;\n}\n\ninterface IComStorageSetProp extends IComStorageBasicProp {\n  // isReset?: boolean\n  expireTime?: number;\n  unitTime?: UnitTimeType;\n}\n\ninterface IComCookieBasicProp extends IComStorageSetProp {\n  expires?: number | Date;\n  path?: string;\n  domain?: string;\n  secure?: boolean;\n  sameSite?: \"strict\" | \"Strict\" | \"lax\" | \"Lax\" | \"none\" | \"None\" | undefined;\n  [property: string]: any;\n}\ninterface jointParamsType {\n  key: string;\n  prefix: string;\n  suffix: string;\n  linkSign: string;\n}\n\ninterface IComStorageFun {\n  setFun(\n    key: string,\n    value: any,\n    options?: IComStorageSetProp | IComCookieBasicProp\n  ): void;\n  getFun(\n    key: string,\n    options?: IComStorageBasicProp | IComCookieBasicProp\n  ): any;\n  delFun(\n    key: string,\n    options?: IComStorageBasicProp | IComCookieBasicProp\n  ): void;\n  existFun(\n    key: string,\n    options?: IComStorageBasicProp | IComCookieBasicProp\n  ): boolean;\n  allKey(options?: IComStorageBasicProp | IComCookieBasicProp): string[];\n  clearFun(options?: IComStorageBasicProp | IComCookieBasicProp): void;\n}\n\nconst StorageTypeInstance: StorageInstanceType = {\n  cookie: Cookies as Cookies.CookiesStatic,\n  local: globalThis?.localStorage as Storage,\n  session: globalThis?.sessionStorage as Storage,\n};\n\nconst FormatUnitTime: IFormatUnitTime = {\n  ms: 1,\n  s: 1000,\n  min: 60 * 1000,\n  h: 60 * 60 * 1000,\n  d: 864e5,\n  w: 7 * 864e5,\n  m: 30 * 864e5,\n  y: 365 * 864e5,\n};\nconst OptionsCookieProp = [\"expires\", \"path\", \"domain\", \"secure\", \"sameSite\"];\nconst OptionsDefaultProp = [\n  \"prefix\",\n  \"suffix\",\n  \"linkSign\",\n  // 'isReset',\n  \"expireTime\",\n  \"unitTime\",\n  \"expires\",\n  \"path\",\n  \"domain\",\n  \"secure\",\n  \"sameSite\",\n];\n\nclass ComStorage implements IComStorageFun {\n  private instanceType: StorageType | undefined;\n  private prefix = \"\";\n  private suffix = \"\";\n  private linkSign = \".\";\n  // private isReset: boolean = true\n  private expireTime = -1;\n  private unitTime: UnitTimeType = \"ms\";\n\n  private expires: number | Date | undefined;\n  private path: string | undefined = \"/\";\n  private domain: string | undefined;\n  private secure: boolean | undefined = false;\n  private sameSite:\n    | \"strict\"\n    | \"Strict\"\n    | \"lax\"\n    | \"Lax\"\n    | \"none\"\n    | \"None\"\n    | undefined = \"Lax\";\n\n  constructor(\n    type: StorageType,\n    options?: IComStorageSetProp | IComCookieBasicProp | undefined\n  ) {\n    if (type && (type === \"cookie\" || type === \"local\" || type === \"session\")) {\n      this.instanceType = type;\n    } else {\n      throw Error(\n        \"实例类型值类型是字符串类型，且值只能为 cookie或local或session\"\n      );\n    }\n\n    if (options && isObject(options)) {\n      Object.entries(options).forEach(([key, value]) => {\n        this[key] = value;\n      });\n    }\n  }\n  setFun(\n    key: string,\n    value: any,\n    options?: IComStorageSetProp | IComCookieBasicProp | undefined\n  ): void {\n    if (arguments.length === 0) return;\n    if (!isString(key) || !key.trim()) {\n      throw Error(\"浏览器存储的标识必须是字符串类型,且不能为空字符串！\");\n    }\n\n    let Config: IComStorageSetProp | IComCookieBasicProp = {};\n\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]];\n    }\n\n    if (!isUndefined(options)) {\n      Config = { ...Config, ...options };\n    }\n\n    const jointKeyParams: jointParamsType = {\n      key,\n      prefix: Config.prefix as string,\n      linkSign: Config.linkSign as string,\n      suffix: Config.suffix as string,\n    };\n    key = jointKey(jointKeyParams);\n\n    const dataExpTime =\n      (Config.expireTime as number) *\n        FormatUnitTime[Config.unitTime as string] +\n      new Date().getTime();\n\n    console.log(\"time\", dataExpTime);\n    if (!isString(value)) {\n      value = value ? JSON.stringify(value) : \"undefined\";\n    }\n    if (this.instanceType === \"cookie\") {\n      if (dataExpTime > 0) {\n        (Config as IComCookieBasicProp).expires = new Date(dataExpTime);\n      }\n      const cookieOpt = {};\n      OptionsCookieProp.forEach((key) => {\n        if (!isUndefined(Config[key])) {\n          cookieOpt[key] = Config[key];\n        }\n      });\n      // console.log(cookieOpt)\n      Cookies.set(key, value, cookieOpt);\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\n      // Instance.set(key, value,cookieOpt)\n    } else {\n      const Instance = StorageTypeInstance[\n        this.instanceType as StorageType\n      ] as Storage;\n      const saveData = {\n        _tj_value: value,\n        _tj_expireTime: dataExpTime,\n      };\n      Instance.setItem(key, encodeURIComponent(JSON.stringify(saveData)));\n    }\n  }\n  getFun(\n    key: string,\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\n  ) {\n    if (arguments.length === 0) return;\n    if (!isString(key) || !key.trim()) {\n      throw Error(\"浏览器存储的标识必须是字符串类型,且不能为空字符串！\");\n    }\n\n    let Config: IComStorageBasicProp | IComCookieBasicProp = {};\n\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]];\n    }\n\n    if (!isUndefined(options)) {\n      Config = { ...Config, ...options };\n    }\n    const jointKeyParams: jointParamsType = {\n      key,\n      prefix: Config.prefix as string,\n      linkSign: Config.linkSign as string,\n      suffix: Config.suffix as string,\n    };\n    key = jointKey(jointKeyParams);\n\n    let rtnData: any = undefined;\n\n    if (this.instanceType === \"cookie\") {\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\n      // const getCookieData = Instance.get(key)\n      const getCookieData = Cookies.get(key);\n      if (isString(getCookieData)) {\n        if (isJson(getCookieData)) {\n          rtnData = JSON.parse(getCookieData as string);\n        }\n\n        rtnData = getCookieData;\n      }\n    } else {\n      const Instance = StorageTypeInstance[\n        this.instanceType as StorageType\n      ] as Storage;\n      const tempData = decodeURIComponent(Instance.getItem(key) as string);\n      if (isString(tempData)) {\n        if (isJson(tempData)) {\n          const nowTime = Date.now();\n          const getStorageData = JSON.parse(tempData);\n          if (\n            getStorageData &&\n            getStorageData._tj_expireTime &&\n            getStorageData._tj_expireTime > nowTime\n          ) {\n            if (getStorageData._tj_value && isJson(getStorageData._tj_value)) {\n              rtnData = JSON.parse(getStorageData._tj_value);\n            } else {\n              rtnData = getStorageData._tj_value;\n            }\n          }\n        } else {\n          // 只是一个字符串\n          rtnData = tempData;\n        }\n      }\n    }\n\n    return rtnData;\n  }\n  delFun(\n    key: string,\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\n  ): void {\n    if (arguments.length === 0) return;\n    if (!isString(key) || !key.trim()) {\n      throw Error(\"浏览器存储的标识必须是字符串类型,且不能为空字符串！\");\n    }\n\n    let Config: IComStorageSetProp | IComCookieBasicProp = {};\n\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]];\n    }\n\n    if (!isUndefined(options)) {\n      Config = { ...Config, ...options };\n    }\n\n    const jointKeyParams: jointParamsType = {\n      key,\n      prefix: Config.prefix as string,\n      linkSign: Config.linkSign as string,\n      suffix: Config.suffix as string,\n    };\n    key = jointKey(jointKeyParams);\n\n    if (this.instanceType === \"cookie\") {\n      const cookieOpt = {};\n      OptionsCookieProp.forEach((key) => {\n        if (!isUndefined(Config[key])) {\n          cookieOpt[key] = Config[key];\n        }\n      });\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\n      if (Object.keys(cookieOpt).length === 0) {\n        Cookies.remove(key);\n      } else {\n        Cookies.remove(key, cookieOpt);\n      }\n    } else {\n      const Instance = StorageTypeInstance[\n        this.instanceType as StorageType\n      ] as Storage;\n      Instance.removeItem(key);\n    }\n  }\n  existFun(\n    key: string,\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\n  ): boolean {\n    let rtnData: any = undefined;\n    if (options) {\n      rtnData = this.getFun(key, options);\n    } else {\n      rtnData = this.getFun(key);\n    }\n\n    return !!rtnData;\n  }\n  allKey(options?: IComStorageBasicProp | undefined): string[] {\n    // 获取当前浏览器该类型的缓存的所有key值，组装为一个数组\n    const keyArr: string[] = []; // 存储临时筛选结果的数组\n    const getKeys: string[] = []; // 临时存储缓存keys的数组\n    const resArr: string[] = []; // 返回有效的keys数组\n    // 判断缓存类型\n    if (this.instanceType === \"cookie\") {\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\n      const keys = Object.keys(Cookies.get());\n      getKeys.push(...keys);\n    } else {\n      const Instance = StorageTypeInstance[\n        this.instanceType as StorageType\n      ] as Storage;\n      const keys = Object.keys(Instance);\n      getKeys.push(...keys);\n    }\n\n    if (options && isObject(options)) {\n      const plen = Object.keys(options).length;\n      const pre = options.prefix ?? this.prefix;\n      const lsign = options.linkSign ?? this.linkSign;\n      const suf = options.suffix ?? this.suffix;\n\n      if (plen >= 3) {\n        // 3个参数 1种情况\n        getKeys.forEach((val) => {\n          if (val.includes(pre + lsign) && val.includes(lsign + suf)) {\n            keyArr.push(val);\n          }\n        });\n      } else if (plen >= 2) {\n        // 2个参数 p+l\\p+s\\l+s\\ 3种情况\n        if (options.prefix && options.suffix && !options.linkSign) {\n          getKeys.forEach((val) => {\n            if (val.includes(pre + lsign) && val.includes(lsign + suf)) {\n              keyArr.push(val);\n            }\n          });\n        } else if (options.prefix && options.linkSign && !options.suffix) {\n          getKeys.forEach((val) => {\n            if (val.includes(pre + lsign)) {\n              keyArr.push(val);\n            }\n          });\n        } else if (options.linkSign && options.suffix && !options.prefix) {\n          getKeys.forEach((val) => {\n            if (val.includes(lsign + suf)) {\n              keyArr.push(val);\n            }\n          });\n        }\n      } else {\n        // 1个参数 p\\l\\s  3种情况\n        if (options.prefix && !options.linkSign && !options.suffix) {\n          getKeys.forEach((val) => {\n            if (val.includes(pre)) {\n              keyArr.push(val);\n            }\n          });\n        } else if (options.linkSign && !options.prefix && !options.suffix) {\n          getKeys.forEach((val) => {\n            if (val.includes(lsign)) {\n              keyArr.push(val);\n            }\n          });\n        } else if (options.suffix && !options.linkSign && !options.prefix) {\n          getKeys.forEach((val) => {\n            if (val.includes(suf)) {\n              keyArr.push(val);\n            }\n          });\n        }\n      }\n    } else {\n      keyArr.push(...getKeys);\n    }\n\n    let InsGet: Function;\n    if (this.instanceType === \"cookie\") {\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\n      InsGet = (key: string) => Cookies.get(key);\n    } else {\n      const Instance = StorageTypeInstance[\n        this.instanceType as StorageType\n      ] as Storage;\n      InsGet = (key: string) => Instance.getItem(key);\n    }\n\n    if (keyArr.length > 0) {\n      // 过滤无效的keys\n      for (let i = 0; i < keyArr.length; i++) {\n        const val = keyArr[i];\n        // 判断缓存值的过期时间是否已经过期\n\n        const isTrue = !getValidValue(InsGet(val));\n        if (isTrue) {\n          // 如果过期，则继续遍历下一个\n          continue;\n        } else {\n          // 如果有效则添加到结果数组中\n          resArr.push(val);\n        }\n      }\n    }\n\n    return resArr;\n  }\n  clearFun(\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\n  ): void {\n    let resArr: string[] = [];\n\n    if (this.instanceType === \"cookie\") {\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\n      const cookieOpt = {};\n\n      if (options) {\n        resArr = [...this.allKey(options)];\n        OptionsCookieProp.forEach((key) => {\n          if (!isUndefined(options[key])) {\n            cookieOpt[key] = options[key];\n          }\n        });\n      } else {\n        resArr = [...this.allKey()];\n      }\n      if (resArr.length > 0) {\n        if (Object.keys(cookieOpt).length === 0) {\n          resArr.forEach((val) => Cookies.remove(val));\n        } else {\n          resArr.forEach((val) => Cookies.remove(val, cookieOpt));\n        }\n      }\n    } else {\n      const Instance = StorageTypeInstance[\n        this.instanceType as StorageType\n      ] as Storage;\n      if (options) {\n        resArr = [...this.allKey(options)];\n        if (resArr.length > 0) {\n          resArr.forEach((val) => Instance.removeItem(val));\n        }\n      } else {\n        Instance.clear();\n      }\n    }\n  }\n}\n\n// 拼接key\nfunction jointKey(keyOpt: jointParamsType): string {\n  let rtnKey = \"\";\n\n  if (keyOpt.linkSign.trim()) {\n    if (keyOpt.prefix.trim()) {\n      rtnKey += keyOpt.prefix + keyOpt.linkSign;\n    }\n\n    rtnKey += keyOpt.key;\n\n    if (keyOpt.suffix.trim()) {\n      rtnKey += keyOpt.linkSign + keyOpt.suffix;\n    }\n  } else {\n    rtnKey = keyOpt.key.trim();\n  }\n\n  return rtnKey;\n}\n\n// 判断存储值是否有效\nfunction getValidValue(val: unknown): boolean {\n  let rtnData = true;\n\n  if (isString(val)) {\n    if (isJson(val)) {\n      const data = JSON.parse(val as string);\n      if (data._tj_expireTime && data._tj_expireTime < Date.now()) {\n        rtnData = false;\n      }\n    }\n  } else {\n    rtnData = false;\n  }\n\n  return rtnData;\n}\n\nfunction newStorage(type: StorageType, options?: IComCookieBasicProp) {\n  return new ComStorage(type, options);\n}\n\nexport { newStorage };\n","// 1、计算字符串中指定字符出现的次数\nconst charInCounts = (str: string, char: string): number => {\n  return str.split(char).length - 1;\n};\n\nexport { charInCounts };\n","// 手机号正则\nconst REP_MOBILE =\n  /^(?:(?:\\+|00)86)?1(?:(?:3[\\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\\d])|(?:9[189]))\\d{8}$/;\n\nexport { REP_MOBILE };\n","import { REP_MOBILE } from \"../../common/RegExpMap\";\n\n/**\n * @description 手机号脱敏处理(Desensitization treatment mobile)\n * @param [strng] mobile\n * @returns[string] 返回处理后的手机号\n */\nconst DTMobile = (mobile: string): string => {\n  let rtnStr = \"\";\n  if (typeof mobile === \"string\") {\n    if (REP_MOBILE.test(mobile)) {\n      rtnStr = mobile.replace(/^(\\d{3})\\d{4}(\\d{4})$/, \"$1****$2\");\n    } else {\n      console.warn(\"请输入一个正确的手机号\");\n    }\n  } else {\n    console.warn(\"请输入一个字符串格式的手机号\");\n  }\n  return rtnStr;\n};\n\nexport { DTMobile };\n","type RFS =\n  | \"requestFullscreen\"\n  | \"webkitRequestFullScreen\"\n  | \"mozRequestFullScreen\"\n  | \"msRequestFullscreen\";\ntype EFS =\n  | \"exitFullscreen\"\n  | \"webkitExitFullscreen\"\n  | \"webkitCancelFullScreen\"\n  | \"mozCancelFullScreen\"\n  | \"msExitFullscreen\";\ntype FSEL =\n  | \"fullscreenElement\"\n  | \"webkitFullscreenElement\"\n  | \"webkitCurrentFullScreenElement\"\n  | \"mozFullScreenElement\"\n  | \"msFullscreenElement\";\ntype FSENAB =\n  | \"fullscreenEnabled\"\n  | \"webkitFullscreenEnabled\"\n  | \"webkitCancelFullScreen\"\n  | \"mozFullScreenEnabled\"\n  | \"msFullscreenEnabled\";\ntype FSC =\n  | \"fullscreenchange\"\n  | \"webkitfullscreenchange\"\n  | \"mozfullscreenchange\"\n  | \"MSFullscreenChange\";\ntype FCE =\n  | \"fullscreenerror\"\n  | \"webkitfullscreenerror\"\n  | \"mozfullscreenerror\"\n  | \"MSFullscreenError\";\ntype FunctionMap = [RFS, EFS, FSEL, FSENAB, FSC, FCE];\n\nconst FunMap: FunctionMap[] = [\n  [\n    \"requestFullscreen\",\n    \"exitFullscreen\",\n    \"fullscreenElement\",\n    \"fullscreenEnabled\",\n    \"fullscreenchange\",\n    \"fullscreenerror\",\n  ],\n  // New WebKit\n  [\n    \"webkitRequestFullscreen\" as RFS,\n    \"webkitExitFullscreen\",\n    \"webkitFullscreenElement\",\n    \"webkitFullscreenEnabled\",\n    \"webkitfullscreenchange\",\n    \"webkitfullscreenerror\",\n  ],\n  // Old WebKit\n  [\n    \"webkitRequestFullScreen\",\n    \"webkitCancelFullScreen\",\n    \"webkitCurrentFullScreenElement\",\n    \"webkitCancelFullScreen\",\n    \"webkitfullscreenchange\",\n    \"webkitfullscreenerror\",\n  ],\n  [\n    \"mozRequestFullScreen\",\n    \"mozCancelFullScreen\",\n    \"mozFullScreenElement\",\n    \"mozFullScreenEnabled\",\n    \"mozfullscreenchange\",\n    \"mozfullscreenerror\",\n  ],\n  [\n    \"msRequestFullscreen\",\n    \"msExitFullscreen\",\n    \"msFullscreenElement\",\n    \"msFullscreenEnabled\",\n    \"MSFullscreenChange\",\n    \"MSFullscreenError\",\n  ],\n];\ntype FunType = {\n  requestFullscreen: RFS;\n  exitFullscreen: EFS;\n  fullscreenElement: FSEL;\n  fullscreenEnabled: FSENAB;\n  fullscreenchange: FSC;\n  fullscreenerror: FCE;\n};\nconst isNode = typeof window === \"undefined\";\nlet _DOC = {};\nif (!isNode) {\n  _DOC = document;\n}\n\nconst defaultFunMap: FunctionMap = FunMap[0];\nconst FunAPI: FunType = {\n  requestFullscreen: \"requestFullscreen\",\n  exitFullscreen: \"exitFullscreen\",\n  fullscreenElement: \"fullscreenElement\",\n  fullscreenEnabled: \"fullscreenEnabled\",\n  fullscreenchange: \"fullscreenchange\",\n  fullscreenerror: \"fullscreenerror\",\n};\n\nfor (const fmap of FunMap) {\n  if (fmap[1] in _DOC) {\n    for (const [idx, fun] of fmap.entries()) {\n      FunAPI[defaultFunMap[idx]] = fun;\n    }\n  }\n}\n\ntype FullEvent = {\n  change: FSC;\n  error: FCE;\n};\n\nconst eventNameMap: FullEvent = {\n  change: FunAPI.fullscreenchange,\n  error: FunAPI.fullscreenerror,\n};\n\nconst isFull = (): boolean => Boolean(_DOC[FunAPI.fullscreenElement]);\n\nconst getFullEl = (): Element | undefined =>\n  _DOC[FunAPI.fullscreenElement] ?? undefined;\n\nconst isFullEnabled = (): boolean => Boolean(_DOC[FunAPI.fullscreenEnabled]);\n\nconst openFull = (\n  el: Element = (_DOC as Document).documentElement,\n  options: FullscreenOptions = {\n    navigationUI: \"auto\",\n  }\n): Promise<void> => {\n  // console.log(FunAPI)\n  return el[FunAPI.requestFullscreen](options);\n};\n\nconst closeFull = (): Promise<void> => {\n  return _DOC[FunAPI.exitFullscreen]();\n};\n\nconst toggleFull = (\n  el: Element = (_DOC as Document).documentElement,\n  options: FullscreenOptions = {\n    navigationUI: \"auto\",\n  }\n) => (isFull() ? closeFull() : openFull(el, options));\n\nexport { isFull, getFullEl, isFullEnabled, openFull, closeFull, toggleFull };\n","const scrollProgressBar = (): number => {\n  let bfb = 0;\n  let WIN: any;\n  let _DOC: any;\n  if (typeof window !== \"undefined\") {\n    WIN = window as Window;\n  }\n  if (typeof document !== \"undefined\") {\n    _DOC = document as Document;\n  }\n  const clientH =\n    WIN.innerHeight ||\n    _DOC.documentElement.clientHeight ||\n    _DOC.body.clientHeight;\n  const offH = _DOC.documentElement.offsetHeight || _DOC.body.offsetHeight;\n  const sTop = _DOC.documentElement.scrollTop || _DOC.body.scrollTop;\n\n  if (clientH < offH) {\n    const sliderH = (clientH / offH) * clientH;\n\n    if (sTop === 0) {\n      bfb = 0;\n    } else {\n      const currentH = Math.ceil(sTop + (sliderH / clientH) * offH);\n      bfb = parseInt(((currentH / offH) * 100).toFixed(0));\n    }\n  } else {\n    bfb = 0;\n  }\n  return bfb;\n};\n\nconst scrollBackTop = (step = 0.1, time = 20): void => {\n  let WIN: any;\n  let _DOC: any;\n  if (typeof window !== \"undefined\") {\n    WIN = window as Window;\n  }\n  if (typeof document !== \"undefined\") {\n    _DOC = document as Document;\n  }\n  const x: number = WIN.scrollX || 0;\n  const y: number = WIN.scrollY || 0;\n  let elTop = _DOC.documentElement.scrollTop || _DOC.body.scrollTop;\n\n  if (typeof step === \"number\") {\n    if (step <= 0) {\n      step = 0.1;\n    } else if (step > 1) {\n      step = 1;\n    }\n  } else {\n    step = 0.1;\n  }\n\n  if (typeof time !== \"number\") {\n    time = 20;\n  }\n  console.log(y);\n  // 设置定时器制作动画效果\n  if (y > 0) {\n    const countNum = Math.ceil(y * step);\n\n    const timer = setInterval(function () {\n      // 高度自减回收过程\n      elTop -= countNum;\n      // 当高度为0清除定时器 - 停止动画\n      if (elTop <= 0) {\n        clearInterval(timer);\n      }\n      // 重新将高度t赋值给滚动的高度\n      _DOC.documentElement.scrollTop = _DOC.body.scrollTop = elTop;\n    }, time);\n  }\n};\n\nexport { scrollProgressBar, scrollBackTop };\n","import { isArray, isObject } from \"../../type_tool/objDel\";\n\ntype treeOption = {\n  pidName: string;\n  idName: string;\n  childName: string;\n  initPid: string | number;\n};\n\n/**\n * 将目标数组转换为tree树形数组\n * @param targetArr\n * @param options\n * @returns 返回一个treeData\n */\nconst toTreeData = (\n  targetArr: any[],\n  options: treeOption = {\n    pidName: \"pid\",\n    childName: \"children\",\n    idName: \"id\",\n    initPid: \"0\",\n  }\n): any[] => {\n  if (!isArray(targetArr)) {\n    console.warn(\"请传入一个数组类型的参数\");\n    return [];\n  }\n  const len = targetArr.length;\n  if (len < 2) {\n    return targetArr;\n  }\n\n  const treelist: any[] = [];\n  for (let i = 0; i < len; i++) {\n    let param = {};\n    if (targetArr[i][options.pidName] == options.initPid) {\n      const getArr = toTreeData(targetArr, {\n        ...options,\n        initPid: targetArr[i][options.idName],\n      });\n      if (getArr && getArr.length > 0) {\n        param[options.childName] = getArr;\n      }\n      param = { ...targetArr[i], ...param };\n      treelist.push(param);\n    }\n  }\n  return treelist;\n};\n\n/**\n * 归树形数据扁平化\n * @param targetArr\n * @param childName\n * @returns\n */\nconst treeToFlat = (targetArr: any[], childName = \"children\"): any[] => {\n  if (!isArray(targetArr)) {\n    console.warn(\"请传入一个数组类型的参数\");\n    return [];\n  }\n  const len = targetArr.length;\n  if (len < 1) {\n    return targetArr;\n  }\n  const flatArr: any[] = [];\n\n  for (let i = 0; i < len; i++) {\n    const param = { ...targetArr[i] };\n    delete param[childName];\n    flatArr.push(param);\n    if (targetArr[i][childName] && targetArr[i][childName]?.length) {\n      flatArr.push(...treeToFlat(targetArr[i][childName]));\n    }\n  }\n\n  return flatArr;\n};\n\n/**\n * 根据条件查询树节点数据\n * @param targetArr\n * @param conditions\n * @param cb\n * @param childName\n * @returns\n */\nconst findTreeData = (\n  targetArr: any[],\n  conditions: object,\n  cb?: Function,\n  childName = \"children\"\n) => {\n  if (!isArray(targetArr)) {\n    console.warn(\"请传入一个数组类型的参数\");\n    return;\n  }\n  if (!isObject(conditions)) {\n    console.warn(\"请传入一个JSON对象类型的筛选参数\");\n    return;\n  }\n  const len = targetArr.length;\n  let res = {};\n  for (let i = 0; i < len; i++) {\n    let flag = true;\n    for (const key in conditions) {\n      if (Object.prototype.hasOwnProperty.call(conditions, key)) {\n        const tempCon = conditions[key];\n        if (targetArr[i][key] !== tempCon) {\n          flag = false;\n        }\n      }\n    }\n\n    if (flag) {\n      cb && cb(targetArr[i]);\n      res = targetArr[i];\n      return res;\n    }\n\n    if (targetArr[i][childName]) {\n      findTreeData(targetArr[i][childName], conditions, cb, childName);\n    }\n  }\n  return undefined;\n};\n\nexport { toTreeData, treeToFlat, findTreeData };\n","function formatChineseRMB(money: number) {\n  //汉字的数字\n  const cnNums: string[] = [\n    \"零\",\n    \"壹\",\n    \"贰\",\n    \"叁\",\n    \"肆\",\n    \"伍\",\n    \"陆\",\n    \"柒\",\n    \"捌\",\n    \"玖\",\n  ];\n  //基本单位\n  const cnIntRadice: string[] = [\"\", \"拾\", \"佰\", \"仟\"];\n  //对应整数部分扩展单位\n  const cnIntUnits: string[] = [\"\", \"万\", \"亿\", \"兆\"];\n  //对应小数部分单位\n  const cnDecUnits: string[] = [\"角\", \"分\", \"毫\", \"厘\"];\n  //整数金额时后面跟的字符\n  const cnInteger = \"整\";\n  //整型完以后的单位\n  const cnIntLast = \"元\";\n  //最大处理的数字\n  const maxNum = 999999999999999.9999;\n  //金额整数部分\n  let integerNum = \"\";\n  //金额小数部分\n  let decimalNum = \"\";\n  //输出的中文金额字符串\n  let chineseStr = \"\";\n  //分离金额后用的数组，预定义\n  // let parts: string[] = []\n  // 传入的参数为空情况\n  if (typeof money === \"undefined\") {\n    return \"\";\n  }\n  // 去除前面的0\n  // money = Number(money.toString().replace(/\\b(0+)/gi,\"\"))\n  // 当数字 < 0 时，取绝对值\n  money = parseFloat(Math.abs(money).toString());\n  if (money >= maxNum) {\n    return \"\";\n  }\n  // 传入的参数为0情况\n  if (money == 0) {\n    chineseStr = cnNums[0] + cnIntLast + cnInteger;\n    return chineseStr;\n  }\n  // 转为字符串\n  const moneyStr: string = money.toString();\n  // indexOf 检测某字符在字符串中首次出现的位置 返回索引值（从0 开始） -1 代表无\n  if (moneyStr.indexOf(\".\") == -1) {\n    integerNum = moneyStr;\n    decimalNum = \"\";\n  } else {\n    const parts: string[] = moneyStr.split(\".\");\n    integerNum = parts[0] as string;\n    decimalNum = (parts[1] as string).substring(0, 4);\n  }\n  //转换整数部分\n  if (parseInt(integerNum, 10) > 0) {\n    let zeroCount = 0;\n    const IntLen = integerNum.length;\n    for (let i = 0; i < IntLen; i++) {\n      const n = integerNum.substring(i, i + 1);\n      const p = IntLen - i - 1;\n      const q = p / 4;\n      const m = p % 4;\n      if (n == \"0\") {\n        zeroCount++;\n      } else {\n        if (zeroCount > 0) {\n          chineseStr += cnNums[0];\n        }\n        zeroCount = 0;\n        chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];\n      }\n      if (m == 0 && zeroCount < 4) {\n        chineseStr += cnIntUnits[q];\n      }\n    }\n    // 最后+ 元\n    chineseStr += cnIntLast;\n  }\n  // 转换小数部分\n  if (decimalNum != \"\") {\n    const decLen = decimalNum.length;\n    for (let i = 0; i < decLen; i++) {\n      const n = decimalNum.substring(i, i + 1);\n      if (n != \"0\") {\n        chineseStr += cnNums[Number(n)] + cnDecUnits[i];\n      }\n    }\n  }\n  if (chineseStr == \"\") {\n    chineseStr += cnNums[0] + cnIntLast + cnInteger;\n  } else if (decimalNum == \"\") {\n    chineseStr += cnInteger;\n  }\n\n  return chineseStr;\n}\n\nexport { formatChineseRMB };\n","function numberThousandsFormat(num: number, decimal = -1) {\n  if (typeof num !== \"number\") {\n    return undefined;\n  }\n\n  let n: number = num;\n  let r = \"\";\n  let temp: number;\n  do {\n    // 求模的值，用于获取高三位，这里可能有小数\n    const mod = n % 1000;\n    // 值是不是大于1，是继续的条件\n    n = n / 1000;\n    // 高三位\n    temp = ~~mod;\n    // 1. 填充 : n>1 循环未结束， 就要填充为比如，1 => 001,\n    // 不然 1 001， 就会变成 '11',\n    // 2. 拼接 \",\"\n    r = (n >= 1 ? `${temp}`.padStart(3, \"0\") : temp) + (!!r ? \",\" + r : \"\");\n  } while (n >= 1);\n\n  let sNum = \"\";\n  if (decimal >= 0) {\n    sNum += num.toFixed(decimal);\n  } else {\n    sNum += num;\n  }\n\n  const idx = sNum.indexOf(\".\");\n  // 拼接小数部分，\n  if (idx >= 0) {\n    r += sNum.substring(idx);\n  }\n  return r;\n}\n\nexport { numberThousandsFormat };\n"],"names":["paramsNullError","prefix","customTxt","deaInfo","console","error","Error","isBasicType","type","params","String","toLocaleLowerCase","value","arguments","length","isJson","obj","JSON","parse","e","log","isBoolean","isNumber","isString","isUndefined","isSymbol","isBigint","isNumType","name","flag","Number","isFloat","y","indexOf","isInfinite","isFinite","isNaN","isInt","objTypeMap","isObjType","pType","Object","prototype","toString","call","isNull","isArray","isObject","isDate","isFunction","simpleTypeArr","getType","warn","rtnStr","typeStr","typeFlag","includes","numT.isInt","numT.isFloat","numT.isNaN","numT.isInfinite","objT.isNull","objT.isObject","objT.isArray","objT.isFunction","objT.isDate","getArrayAllType","rtnArr","i","val","push","getArrayTypeDetail","selectType","resArr","selectArr","allArr","index","getObjectAllType","key","hasOwnProperty","getObjectTypeDetail","ParseUrlFunction","splitType","getUrlParamsOfSplit","URLSearchParamsType","url","urlStr","split","urlSearchParams","URLSearchParams","fromEntries","entries","RegExpType","result","replace","$","$1","$2","DecodeUrlType","noneType","decodeURIType","decodeURI","decodeURIComponentType","decodeURIComponent","EncodeUrlType","encodeURIType","encodeURI","encodeURIComponent","ConverParamsConfig","_a","globalThis","location","href","hashValue","encodeUrlType","config","_b","search","parseUrlType","decodeUrlType","getUrlParams","options","paramsObj","opt","keyStr","assign","urlArr","substring","lastIndexOf","converParamsToUrl","urlParams","paramsArr","forEach","param","trim","oldParamsObj","newParamsObj","newParamsArr","join","len","arr","target","source","api","init","converter","defaultAttributes","set","attributes","document","expires","Date","now","toUTCString","escape","stringifiedAttributes","attributeName","cookie","write","create","get","cookies","jar","parts","slice","foundKey","read","remove","withAttributes","this","withConverter","freeze","path","StorageTypeInstance","Cookies","local","localStorage","session","sessionStorage","FormatUnitTime","ms","s","min","h","d","w","m","OptionsCookieProp","OptionsDefaultProp","ComStorage","constructor","suffix","linkSign","expireTime","unitTime","secure","sameSite","instanceType","setFun","Config","jointKey","dataExpTime","getTime","stringify","cookieOpt","saveData","_tj_value","_tj_expireTime","setItem","getFun","rtnData","getCookieData","Instance","tempData","getItem","nowTime","getStorageData","delFun","keys","removeItem","existFun","allKey","keyArr","getKeys","plen","pre","lsign","suf","_c","InsGet","getValidValue","clearFun","clear","keyOpt","rtnKey","data","newStorage","charInCounts","str","char","REP_MOBILE","DTMobile","mobile","test","FunMap","isNode","window","_DOC","defaultFunMap","FunAPI","requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror","fmap","idx","fun","isFull","Boolean","getFullEl","undefined","isFullEnabled","openFull","el","documentElement","navigationUI","closeFull","toggleFull","scrollProgressBar","WIN","bfb","clientH","innerHeight","clientHeight","body","offH","offsetHeight","sTop","scrollTop","sliderH","currentH","Math","ceil","parseInt","toFixed","scrollBackTop","step","time","scrollX","scrollY","elTop","countNum","timer","setInterval","clearInterval","toTreeData","targetArr","pidName","childName","idName","initPid","treelist","getArr","treeToFlat","flatArr","findTreeData","conditions","cb","res","tempCon","formatChineseRMB","money","cnNums","cnIntRadice","cnIntUnits","cnDecUnits","integerNum","decimalNum","chineseStr","parseFloat","abs","moneyStr","zeroCount","IntLen","n","p","q","decLen","numberThousandsFormat","num","decimal","temp","r","mod","padStart","sNum"],"mappings":"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"}