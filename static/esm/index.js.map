{"version":3,"file":"index.js","sources":["../../src/common/paramUtils.ts","../../src/type_tool/basic/index.ts","../../src/type_tool/numDel/index.ts","../../src/type_tool/objDel/index.ts","../../src/type_tool/complexFun/index.ts","../../src/url_tool/index.ts","../../node_modules/js-cookie/dist/js.cookie.mjs","../../src/storage_tool/index.ts","../../src/str_tool/simpleStrFun/index.ts","../../src/common/RegExpMap.ts","../../src/str_tool/DTMoblie/index.ts","../../src/browser_tool/screen/index.ts"],"sourcesContent":["\r\nfunction paramsNullError (prefix:string = '',customTxt?:string) {\r\n  let deaInfo = '参数不能为空！'\r\n  if (prefix) {\r\n    deaInfo = prefix + deaInfo\r\n  }\r\n  if (customTxt) {\r\n    deaInfo = customTxt\r\n  }\r\n  console.error(deaInfo)\r\n  throw Error(deaInfo)\r\n}\r\n\r\nexport {paramsNullError}","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nconst isBasicType = function isType(type: string) {\r\n  const params = String(type).toLocaleLowerCase()\r\n  return function basicType(value: unknown): boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${type}方法的`)\r\n    }\r\n\r\n    return typeof value === params\r\n  }\r\n}\r\nfunction isJson(value: unknown): boolean {\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isJson方法的`)\r\n  }\r\n  if (typeof value === 'string') {\r\n    try {\r\n      let obj = JSON.parse(value)\r\n      if (typeof obj == 'object' && obj) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    } catch (e) {\r\n      console.log('error：' + value + '!!!' + e)\r\n      return false\r\n    }\r\n  }\r\n  return false\r\n}\r\nconst isBoolean = isBasicType('Boolean')\r\nconst isNumber = isBasicType('Number')\r\nconst isString = isBasicType('String')\r\nconst isUndefined = isBasicType('Undefined')\r\nconst isSymbol = isBasicType('Symbol')\r\nconst isBigint = isBasicType('Bigint')\r\nexport { isBoolean, isNumber, isString, isUndefined, isSymbol, isBigint, isJson }\r\n","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nfunction isNumType(name:string,type:string) {\r\n\r\n  return function (value:unknown):boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${name}方法的`)\r\n    } \r\n    let flag = typeof value === 'number'\r\n    return (flag && Number[`is${type}`](value))\r\n  }\r\n}\r\n\r\nfunction isFloat(params: unknown): boolean {\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isFloat方法的`)\r\n  }\r\n  let flag = typeof params === 'number'\r\n  let y = String(params).indexOf('.') + 1 // 获取小数点后的个数\r\n\r\n  return (flag && (y>0))\r\n}\r\n\r\nfunction isInfinite(params:unknown):boolean{\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isInfinite方法的`)\r\n  } \r\n  let flag = typeof params === 'number'\r\n  return (flag && !Number.isFinite(params))\r\n}\r\n\r\nconst isInt = isNumType('Int','Integer')\r\nconst isFinite = isNumType('Finite','Finite')\r\nconst isNaN = isNumType('NaN','NaN')\r\n\r\nexport {isFloat,isInt,isFinite,isNaN,isInfinite}","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nconst objTypeMap = { \r\n  nullT:'[object Null]',\r\n  ObjectT:'[object Object]',\r\n  ArrayT:'[object Array]',\r\n  DateT:'[object Date]',\r\n  FunctionT:'[object Function]',\r\n}\r\n \r\n\r\nfunction isObjType(name:string,type:string) {\r\n\r\n  return function (value:unknown):boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${name}方法的`)\r\n    } \r\n    let pType = Object.prototype.toString.call(value)    \r\n    return pType === type\r\n  }\r\n}\r\n\r\nconst isNull = isObjType('Null',objTypeMap.nullT)\r\nconst isArray = isObjType('Array',objTypeMap.ArrayT)\r\nconst isObject = isObjType('Object',objTypeMap.ObjectT)\r\nconst isDate = isObjType('Date',objTypeMap.DateT)\r\nconst isFunction = isObjType('Function',objTypeMap.FunctionT)\r\n\r\nexport {isNull,isArray,isDate,isFunction,isObject}\r\n\r\n","import * as numT from '../numDel'\r\nimport * as objT from '../objDel'\r\nimport {paramsNullError} from '../../common/paramUtils'\r\n\r\ntype returnTypeStr =\r\n  | 'string'\r\n  | 'bigint'\r\n  | 'boolean'\r\n  | 'symbol'\r\n  | 'undefined'\r\n  | 'object'\r\n  | 'function'\r\n  | 'array'\r\n  | 'object'\r\n  | 'date'\r\n  | 'null'\r\n  | 'int'\r\n  | 'float'\r\n  | 'infinite'\r\n  | 'NaN'\r\n\r\ntype arrayTypeDetail = {\r\n  index: string | number\r\n  value: any\r\n  type: returnTypeStr\r\n}\r\n\r\ntype objectTypeDetail = {\r\n  key: string\r\n  value: any\r\n  type: returnTypeStr\r\n}\r\n\r\n// 定义一个typeof可以直接判断出来的单一类型数组\r\nlet simpleTypeArr = [\r\n  'string',\r\n  'bigint',\r\n  'boolean',\r\n  'symbol',\r\n  'undefined',\r\n  'function',\r\n]\r\n\r\nfunction getType(params: unknown): returnTypeStr {\r\n  if (arguments.length === 0) {\r\n    console.warn('getType方法没有接收到参数,返回的类型为undefined')\r\n    return 'undefined'\r\n  }\r\n  let rtnStr: returnTypeStr | 'number' = 'string'\r\n  let typeStr: returnTypeStr | 'number' = typeof params\r\n  let typeFlag = simpleTypeArr.includes(typeStr)\r\n\r\n  if (typeFlag) {\r\n    rtnStr = typeStr\r\n  } else {\r\n    if (typeStr === 'number') {\r\n      if (numT.isInt(params)) {\r\n        rtnStr = 'int'\r\n      } else if (numT.isFloat(params)) {\r\n        rtnStr = 'float'\r\n      } else if (numT.isNaN(params)) {\r\n        rtnStr = 'NaN'\r\n      } else if (numT.isInfinite(params)) {\r\n        rtnStr = 'infinite'\r\n      }\r\n    } else if (typeStr === 'object') {\r\n      if (objT.isNull(params)) {\r\n        rtnStr = 'null'\r\n      } else if (objT.isObject(params)) {\r\n        rtnStr = 'object'\r\n      } else if (objT.isArray(params)) {\r\n        rtnStr = 'array'\r\n      } else if (objT.isFunction(params)) {\r\n        rtnStr = 'function'\r\n      } else if (objT.isDate(params)) {\r\n        rtnStr = 'date'\r\n      }\r\n    }\r\n  }\r\n\r\n  return rtnStr as returnTypeStr\r\n}\r\n\r\nfunction getArrayAllType(params: any[]): returnTypeStr[] {\r\n  if (!objT.isArray(params)) {\r\n    paramsNullError(\"\",\"getArrayAllType方法接收的参数应该是一个数组\")\r\n  }\r\n  let rtnArr: returnTypeStr[] = []\r\n  if (arguments.length > 0 && params.length > 0) {\r\n    for (let i = 0; i < params.length; i++) {\r\n      let val = params[i]\r\n      rtnArr.push(getType(val))\r\n    }\r\n  } \r\n  return rtnArr\r\n}\r\n\r\nfunction getArrayTypeDetail(params: any[],selectType?: returnTypeStr | 'number'): arrayTypeDetail[] {\r\n  if (!objT.isArray(params)) {\r\n    paramsNullError(\"\",\"getArrayTypeDetail方法接收的参数应该是一个数组\")\r\n  }\r\n  let resArr: arrayTypeDetail[] = []\r\n  if (arguments.length > 0) {\r\n    let selectArr: arrayTypeDetail[] = []\r\n    let allArr: arrayTypeDetail[] = []\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      let index = i\r\n      let value = params[i]\r\n      let type:returnTypeStr = getType(value)\r\n\r\n      allArr.push({ index, value, type })\r\n\r\n      if (selectType) {\r\n        if (selectType === 'number' && (['int','float'].includes(type))) {\r\n          selectArr.push({ index, value, type })\r\n        } else if(selectType === type) {\r\n          selectArr.push({ index, value, type })\r\n        }\r\n        continue\r\n      }\r\n    }\r\n\r\n    if (selectType) {\r\n      resArr = [...selectArr]\r\n    } else {\r\n      resArr = [...allArr]\r\n    }\r\n  }\r\n\r\n  return resArr\r\n}\r\n\r\nfunction getObjectAllType(params: object):returnTypeStr[] {\r\n  if (!objT.isObject(params)) {\r\n    paramsNullError(\"\",\"getObjectAllType方法接收的参数应该是一个对象\")\r\n  }\r\n  let resArr:returnTypeStr[] = []\r\n  if (arguments.length > 0) {\r\n\r\n    for (const key in params) {\r\n      if (Object.hasOwnProperty.call(params, key)) {\r\n        let val = params[key]\r\n        resArr.push(getType(val))\r\n      }\r\n    }\r\n  }\r\n\r\n  return resArr\r\n}\r\n\r\nfunction getObjectTypeDetail(params:object, selectType?:returnTypeStr | 'number'):objectTypeDetail[] {\r\n  if (!objT.isObject(params)) {\r\n    paramsNullError(\"\",\"getObjectTypeDetail方法接收的参数应该是一个对象\")\r\n  }\r\n  let resArr:objectTypeDetail[] = []\r\n  if (arguments.length > 0) {\r\n   \r\n    let selectArr:objectTypeDetail[] = []\r\n    let allArr:objectTypeDetail[] = []\r\n\r\n    for (const key in params) {\r\n        \r\n      if (Object.hasOwnProperty.call(params, key)) {\r\n        let value = params[key]\r\n        let type = getType(value)\r\n\r\n        allArr.push({ key, value, type })\r\n\r\n        if (selectType) {\r\n          if (selectType === 'number' && (['int','float'].includes(type))) {\r\n            selectArr.push({ key, value, type })\r\n          } else if(selectType === type) {\r\n            selectArr.push({ key, value, type })\r\n          }\r\n        }\r\n        continue\r\n        \r\n      }\r\n    }\r\n   \r\n    if (selectType) {\r\n      resArr = [...selectArr]\r\n    } else {\r\n      resArr = [...allArr]\r\n    }\r\n  }\r\n \r\n  return resArr\r\n}\r\n\r\nexport { getType, getArrayAllType, getArrayTypeDetail, getObjectAllType, getObjectTypeDetail }\r\n","import { paramsNullError } from '../common/paramUtils'\r\ninterface IParamsType {\r\n  [key: string]: string\r\n}\r\n\r\ntype parseUrlType = 'splitType' | 'URLSearchParamsType' | 'RegExpType'\r\ntype decodeUrlType = 'noneType' | 'decodeURIType' | 'decodeURIComponentType'\r\ntype encodeUrlType = 'noneType' | 'encodeURIType' | 'encodeURIComponentType'\r\ninterface IParseUrlFunction {\r\n  [key: string]: (url: string) => IParamsType\r\n}\r\n\r\nconst ParseUrlFunction: IParseUrlFunction = {\r\n  splitType: getUrlParamsOfSplit,\r\n  URLSearchParamsType: getUrlParamsOfURLSearchParams,\r\n  RegExpType: getUrlParamsOfRegExp,\r\n}\r\n\r\nconst DecodeUrlType = {\r\n  noneType: (url: string) => url,\r\n  decodeURIType: decodeURI,\r\n  decodeURIComponentType: decodeURIComponent,\r\n}\r\n\r\nconst EncodeUrlType = {\r\n  noneType: (url: string) => url,\r\n  encodeURIType: encodeURI,\r\n  encodeURIComponent: encodeURIComponent,\r\n}\r\n\r\ninterface IConverParamsConfig {\r\n  url: string\r\n  hashValue: string\r\n  encodeUrlType: encodeUrlType\r\n}\r\n\r\nconst ConverParamsConfig: IConverParamsConfig = {\r\n  url: globalThis?.location?.href,\r\n  hashValue: '',\r\n  encodeUrlType: 'noneType',\r\n}\r\n\r\ninterface IGetUrlParamsConfig {\r\n  url: string\r\n  parseUrlType: parseUrlType\r\n  decodeUrlType: decodeUrlType\r\n}\r\nconst config: IGetUrlParamsConfig = {\r\n  url: globalThis?.location?.search,\r\n  parseUrlType: 'splitType',\r\n  decodeUrlType: 'noneType',\r\n}\r\nfunction getUrlParams(): IParamsType\r\nfunction getUrlParams(key?: string): string\r\nfunction getUrlParams(options?: IGetUrlParamsConfig): IParamsType\r\nfunction getUrlParams(\r\n  key?: string,\r\n  options?: IGetUrlParamsConfig\r\n): IParamsType | string\r\n\r\nfunction getUrlParams(\r\n  key?: unknown,\r\n  options?: IGetUrlParamsConfig\r\n): IParamsType | string {\r\n  let paramsObj = {}\r\n  let opt: IGetUrlParamsConfig = config\r\n  let keyStr: string = ''\r\n  let urlStr: string = ''\r\n\r\n  if (typeof arguments[0] === 'string') {\r\n    keyStr = arguments[0]\r\n  } else if (typeof arguments[0] === 'object') {\r\n    opt = { ...config, ...arguments[0] }\r\n  }\r\n\r\n  if (typeof arguments[1] === 'object') {\r\n    opt = { ...config, ...arguments[1] }\r\n  }\r\n  urlStr = DecodeUrlType[opt.decodeUrlType](opt.url)\r\n\r\n  if (urlStr.includes('?')) {\r\n    let urlArr: string[] = urlStr.split('?')\r\n    if (urlArr[1].includes('#')) {\r\n      urlStr = '?' + urlArr[1].substring(0, urlArr[1].lastIndexOf('#'))\r\n    }\r\n  }\r\n  paramsObj = ParseUrlFunction[opt.parseUrlType](urlStr)\r\n\r\n  if (keyStr) {\r\n    return paramsObj[keyStr]\r\n  }\r\n\r\n  return paramsObj\r\n}\r\n\r\nfunction converParamsToUrl(urlParams: object): string\r\nfunction converParamsToUrl(\r\n  urlParams: object,\r\n  options?: IConverParamsConfig\r\n): string\r\n\r\nfunction converParamsToUrl(\r\n  urlParams: object,\r\n  options?: IConverParamsConfig\r\n): string {\r\n  if (arguments.length === 0) {\r\n    paramsNullError('converParamsToUrl方法的')\r\n  }\r\n  let urlStr: string = ''\r\n  let paramsArr: string[] = []\r\n  let opt: IConverParamsConfig = ConverParamsConfig\r\n\r\n  if (options) {\r\n    opt = { ...opt, ...options }\r\n  }\r\n\r\n  if (Object.prototype.toString.call(urlParams) === '[object Object]') {\r\n    Object.entries(urlParams).forEach(([key, value]) => {\r\n      let param = key + '=' + EncodeUrlType[opt.encodeUrlType](value)\r\n      paramsArr.push(param)\r\n    })\r\n  } else {\r\n    console.warn('拼接ur的参数格式必须是一个对象类型的数据！')\r\n  }\r\n\r\n  if (opt.url.includes('?')) {\r\n    let urlArr: string[] = opt.url.split('?')\r\n    console.log(urlArr)\r\n    if (urlArr[1].includes('#')) {\r\n      urlStr =\r\n        urlArr[0] + '?' + urlArr[1].substring(0, urlArr[1].lastIndexOf('#'))\r\n\r\n      if (!opt.hashValue.trim()) {\r\n        opt.hashValue = urlArr[1].substring(urlArr[1].lastIndexOf('#'))\r\n      }\r\n    }\r\n    if (paramsArr.length > 0) {\r\n      const oldParamsObj: IParamsType = getUrlParamsOfSplit(urlStr)\r\n      const newParamsObj: IParamsType = { ...oldParamsObj, ...urlParams }\r\n      const newParamsArr: string[] = []\r\n\r\n      Object.entries(newParamsObj).forEach(([key, value]) => {\r\n        let param = key + '=' + EncodeUrlType[opt.encodeUrlType](value)\r\n        newParamsArr.push(param)\r\n      })\r\n      console.log(newParamsArr)\r\n      urlStr = urlArr[0] + '?' + newParamsArr.join('&') + opt.hashValue\r\n    } else {\r\n      urlStr = opt.url + opt.hashValue\r\n    }\r\n  } else {\r\n    if (opt.url.includes('#')) {\r\n      if (!opt.hashValue.trim()) {\r\n        opt.hashValue = opt.url.substring(opt.url.lastIndexOf('#'))\r\n      }\r\n      opt.url = opt.url.substring(0, opt.url.lastIndexOf('#'))\r\n    }\r\n    if (paramsArr.length > 0) {\r\n      urlStr = opt.url + '?' + paramsArr.join('&') + opt.hashValue\r\n    } else {\r\n      urlStr = opt.url + opt.hashValue\r\n    }\r\n  }\r\n\r\n  return urlStr\r\n}\r\n\r\nexport { getUrlParams, converParamsToUrl }\r\n\r\nfunction getUrlParamsOfSplit(url: string): IParamsType {\r\n  // 通过 ? 分割获取后面的参数字符串\r\n  let urlStr = url.split('?')[1]\r\n  // 创建空对象存储参数\r\n  let obj = {}\r\n  if (!urlStr) {\r\n    return obj\r\n  }\r\n  // 再通过 & 将每一个参数单独分割出来\r\n  let paramsArr = urlStr.split('&')\r\n  for (let i = 0, len = paramsArr.length; i < len; i++) {\r\n    // 再通过 = 将每一个参数分割为 key:value 的形式\r\n    let arr = paramsArr[i].split('=')\r\n    obj[arr[0]] = arr[1]\r\n  }\r\n  return obj\r\n}\r\n\r\nfunction getUrlParamsOfURLSearchParams(url: string): IParamsType {\r\n  let urlStr = url.split('?')[1]\r\n  const urlSearchParams = new URLSearchParams(urlStr)\r\n  const result = Object.fromEntries(urlSearchParams.entries())\r\n  return result\r\n}\r\n\r\nfunction getUrlParamsOfRegExp(url: string): IParamsType {\r\n  // \\w+ 表示匹配至少一个(数字、字母及下划线), [\\u4e00-\\u9fa5]+ 表示匹配至少一个中文字符\r\n  let pattern = /(\\w+|[\\u4e00-\\u9fa5]+)=(\\w+|[\\u4e00-\\u9fa5]+)/gi\r\n  let result = {}\r\n  url.replace(pattern, ($, $1, $2) => {\r\n    result[$1] = $2\r\n    return ''\r\n  })\r\n  return result\r\n}\r\n","/*! js-cookie v3.0.1 | MIT */\n/* eslint-disable no-var */\nfunction assign (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target\n}\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\nvar defaultConverter = {\n  read: function (value) {\n    if (value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n  },\n  write: function (value) {\n    return encodeURIComponent(value).replace(\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n      decodeURIComponent\n    )\n  }\n};\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\n\nfunction init (converter, defaultAttributes) {\n  function set (key, value, attributes) {\n    if (typeof document === 'undefined') {\n      return\n    }\n\n    attributes = assign({}, defaultAttributes, attributes);\n\n    if (typeof attributes.expires === 'number') {\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n    }\n    if (attributes.expires) {\n      attributes.expires = attributes.expires.toUTCString();\n    }\n\n    key = encodeURIComponent(key)\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    var stringifiedAttributes = '';\n    for (var attributeName in attributes) {\n      if (!attributes[attributeName]) {\n        continue\n      }\n\n      stringifiedAttributes += '; ' + attributeName;\n\n      if (attributes[attributeName] === true) {\n        continue\n      }\n\n      // Considers RFC 6265 section 5.2:\n      // ...\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n      //     character:\n      // Consume the characters of the unparsed-attributes up to,\n      // not including, the first %x3B (\";\") character.\n      // ...\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n    }\n\n    return (document.cookie =\n      key + '=' + converter.write(value, key) + stringifiedAttributes)\n  }\n\n  function get (key) {\n    if (typeof document === 'undefined' || (arguments.length && !key)) {\n      return\n    }\n\n    // To prevent the for loop in the first place assign an empty array\n    // in case there are no cookies at all.\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\n    var jar = {};\n    for (var i = 0; i < cookies.length; i++) {\n      var parts = cookies[i].split('=');\n      var value = parts.slice(1).join('=');\n\n      try {\n        var foundKey = decodeURIComponent(parts[0]);\n        jar[foundKey] = converter.read(value, foundKey);\n\n        if (key === foundKey) {\n          break\n        }\n      } catch (e) {}\n    }\n\n    return key ? jar[key] : jar\n  }\n\n  return Object.create(\n    {\n      set: set,\n      get: get,\n      remove: function (key, attributes) {\n        set(\n          key,\n          '',\n          assign({}, attributes, {\n            expires: -1\n          })\n        );\n      },\n      withAttributes: function (attributes) {\n        return init(this.converter, assign({}, this.attributes, attributes))\n      },\n      withConverter: function (converter) {\n        return init(assign({}, this.converter, converter), this.attributes)\n      }\n    },\n    {\n      attributes: { value: Object.freeze(defaultAttributes) },\n      converter: { value: Object.freeze(converter) }\n    }\n  )\n}\n\nvar api = init(defaultConverter, { path: '/' });\n/* eslint-enable no-var */\n\nexport default api;\n","import Cookies from 'js-cookie'\r\nimport { isUndefined, isJson, isString } from '../type_tool/basic'\r\nimport { isObject } from '../type_tool/objDel'\r\n\r\ntype UnitTimeType = 'ms' | 's' | 'min' | 'h' | 'd' | 'w' | 'm' | 'y'\r\ntype IFormatUnitTime = {\r\n  [key in UnitTimeType]: number\r\n}\r\ntype StorageType = 'cookie' | 'local' | 'session'\r\n\r\ntype StorageInstanceType = {\r\n  [key in StorageType]: Cookies.CookiesStatic | Storage\r\n}\r\n\r\ninterface IComStorageBasicProp {\r\n  prefix?: string\r\n  suffix?: string\r\n  linkSign?: string\r\n}\r\n\r\ninterface IComStorageSetProp extends IComStorageBasicProp {\r\n  // isReset?: boolean\r\n  expireTime?: number\r\n  unitTime?: UnitTimeType\r\n}\r\n\r\ninterface IComCookieBasicProp extends IComStorageSetProp {\r\n  expires?: number | Date\r\n  path?: string\r\n  domain?: string\r\n  secure?: boolean\r\n  sameSite?: 'strict' | 'Strict' | 'lax' | 'Lax' | 'none' | 'None' | undefined\r\n  [property: string]: any\r\n}\r\ninterface jointParamsType {\r\n  key: string\r\n  prefix: string\r\n  suffix: string\r\n  linkSign: string\r\n}\r\n\r\ninterface IComStorageFun {\r\n  setFun(\r\n    key: string,\r\n    value: any,\r\n    options?: IComStorageSetProp | IComCookieBasicProp\r\n  ): void\r\n  getFun(key: string, options?: IComStorageBasicProp | IComCookieBasicProp): any\r\n  delFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp\r\n  ): void\r\n  existFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp\r\n  ): boolean\r\n  allKey(options?: IComStorageBasicProp | IComCookieBasicProp): string[]\r\n  clearFun(options?: IComStorageBasicProp | IComCookieBasicProp): void\r\n}\r\n\r\nconst StorageTypeInstance: StorageInstanceType = {\r\n  cookie: Cookies as Cookies.CookiesStatic,\r\n  local: localStorage as Storage,\r\n  session: sessionStorage as Storage,\r\n}\r\n\r\nconst FormatUnitTime: IFormatUnitTime = {\r\n  ms: 1,\r\n  s: 1000,\r\n  min: 60 * 1000,\r\n  h: 60 * 60 * 1000,\r\n  d: 864e5,\r\n  w: 7 * 864e5,\r\n  m: 30 * 864e5,\r\n  y: 365 * 864e5,\r\n}\r\nconst OptionsCookieProp = [\r\n  'expires',\r\n  'path',\r\n  'domain',\r\n  'secure',\r\n  'sameSite',\r\n]\r\nconst OptionsDefaultProp = [\r\n  'prefix',\r\n  'suffix',\r\n  'linkSign',\r\n  // 'isReset',\r\n  'expireTime',\r\n  'unitTime',\r\n  'expires',\r\n  'path',\r\n  'domain',\r\n  'secure',\r\n  'sameSite',\r\n]\r\n\r\nclass ComStorage implements IComStorageFun {\r\n  private instanceType: StorageType | undefined\r\n  private prefix: string = ''\r\n  private suffix: string = ''\r\n  private linkSign: string = '.'\r\n  // private isReset: boolean = true\r\n  private expireTime: number = -1\r\n  private unitTime: UnitTimeType = 'ms'\r\n\r\n  private expires: number | Date| undefined\r\n  private path: string |undefined = '/'\r\n  private domain: string | undefined\r\n  private secure: boolean | undefined = false\r\n  private sameSite:'strict'| 'Strict'|'lax'| 'Lax'| 'none'| 'None'| undefined = 'Lax'\r\n\r\n  constructor(\r\n    type: StorageType,\r\n    options?: IComStorageSetProp | IComCookieBasicProp | undefined\r\n  ) {\r\n    if (type && (type === 'cookie' || type === 'local' || type === 'session')) {\r\n      this.instanceType = type\r\n    } else {\r\n      throw Error(\r\n        '实例类型值类型是字符串类型，且值只能为 cookie或local或session'\r\n      )\r\n    }\r\n\r\n    if (options && isObject(options)) {\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        this[key] = value\r\n      })\r\n    }\r\n  }\r\n  setFun(\r\n    key: string,\r\n    value: any,\r\n    options?: IComStorageSetProp | IComCookieBasicProp | undefined\r\n  ): void {\r\n    if (arguments.length === 0) return\r\n    if (!isString(key) || !key.trim()) {\r\n      throw Error('浏览器存储的标识必须是字符串类型,且不能为空字符串！')\r\n    }\r\n\r\n    let Config: IComStorageSetProp | IComCookieBasicProp = {}\r\n\r\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\r\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]]\r\n    }\r\n\r\n    if (!isUndefined(options)) {\r\n      Config = { ...Config, ...options }\r\n    }\r\n\r\n    const jointKeyParams: jointParamsType = {\r\n      key,\r\n      prefix: Config.prefix as string,\r\n      linkSign: Config.linkSign as string,\r\n      suffix: Config.suffix as string,\r\n    }\r\n    key = jointKey(jointKeyParams)\r\n\r\n    const dataExpTime =\r\n      (Config.expireTime as number) * FormatUnitTime[Config.unitTime as string] +  new Date().getTime()\r\n    \r\n    console.log('time',dataExpTime)\r\n    if (!isString(value)) {\r\n\r\n      value = value ? JSON.stringify(value):'undefined'\r\n    }\r\n    if (this.instanceType === 'cookie') {\r\n      if (dataExpTime > 0) {\r\n        ;(Config as IComCookieBasicProp).expires = new Date(dataExpTime)\r\n      }\r\n      let cookieOpt = {}\r\n      OptionsCookieProp.forEach((key) => {\r\n        if (!isUndefined(Config[key])) {\r\n          cookieOpt[key] = Config[key]\r\n        }\r\n      })\r\n      // console.log(cookieOpt)\r\n      Cookies.set(key, value,cookieOpt)\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      // Instance.set(key, value,cookieOpt)\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      const saveData = {\r\n        _tj_value: value,\r\n        _tj_expireTime: dataExpTime,\r\n      }\r\n      Instance.setItem(key, encodeURIComponent(JSON.stringify(saveData)))\r\n    }\r\n  }\r\n  getFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ) {\r\n    if (arguments.length === 0) return\r\n    if (!isString(key) || !key.trim()) {\r\n      throw Error('浏览器存储的标识必须是字符串类型,且不能为空字符串！')\r\n    }\r\n\r\n    let Config: IComStorageBasicProp | IComCookieBasicProp = {}\r\n\r\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\r\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]]\r\n    }\r\n\r\n    if (!isUndefined(options)) {\r\n      Config = { ...Config, ...options }\r\n    }\r\n    const jointKeyParams: jointParamsType = {\r\n      key,\r\n      prefix: Config.prefix as string,\r\n      linkSign: Config.linkSign as string,\r\n      suffix: Config.suffix as string,\r\n    }\r\n    key = jointKey(jointKeyParams)\r\n\r\n    let rtnData: any = undefined\r\n\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      // const getCookieData = Instance.get(key)\r\n      const getCookieData = Cookies.get(key)\r\n      if (isString(getCookieData)) {\r\n        if (isJson(getCookieData)) {\r\n          rtnData = JSON.parse(getCookieData as string)\r\n        }\r\n\r\n        rtnData = getCookieData\r\n      }\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      let tempData =decodeURIComponent(Instance.getItem(key) as string) \r\n      if (isString(tempData)) {\r\n        if (isJson(tempData)) {\r\n          let nowTime = Date.now()\r\n          const getStorageData = JSON.parse(tempData)\r\n          if (\r\n            getStorageData &&\r\n            getStorageData._tj_expireTime &&\r\n            getStorageData._tj_expireTime > nowTime\r\n          ) {\r\n            if (getStorageData._tj_value && isJson(getStorageData._tj_value)) {\r\n              rtnData = JSON.parse(getStorageData._tj_value)\r\n            } else {\r\n              rtnData = getStorageData._tj_value\r\n            }\r\n          }\r\n        } else {\r\n          // 只是一个字符串\r\n          rtnData = tempData\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    return rtnData\r\n  }\r\n  delFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ): void {\r\n    if (arguments.length === 0) return\r\n    if (!isString(key) || !key.trim()) {\r\n      throw Error('浏览器存储的标识必须是字符串类型,且不能为空字符串！')\r\n    }\r\n\r\n    let Config: IComStorageSetProp | IComCookieBasicProp = {}\r\n\r\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\r\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]]\r\n    }\r\n\r\n    if (!isUndefined(options)) {\r\n      Config = { ...Config, ...options }\r\n    }\r\n\r\n    const jointKeyParams: jointParamsType = {\r\n      key,\r\n      prefix: Config.prefix as string,\r\n      linkSign: Config.linkSign as string,\r\n      suffix: Config.suffix as string,\r\n    }\r\n    key = jointKey(jointKeyParams)\r\n\r\n    if (this.instanceType === 'cookie') {\r\n\r\n      let cookieOpt = {}\r\n      OptionsCookieProp.forEach((key) => {\r\n        if (!isUndefined(Config[key])) {\r\n          cookieOpt[key] = Config[key]\r\n        }\r\n      })\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      if (Object.keys(cookieOpt).length === 0) {\r\n        Cookies.remove(key)\r\n      } else {\r\n        Cookies.remove(key, cookieOpt)\r\n      }\r\n      \r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      Instance.removeItem(key)\r\n    }\r\n  }\r\n  existFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ): boolean {\r\n    let rtnData: any = undefined\r\n    if (options) {\r\n      rtnData = this.getFun(key, options)\r\n    } else {\r\n      rtnData = this.getFun(key)\r\n    }\r\n\r\n    return !!rtnData\r\n  }\r\n  allKey(options?: IComStorageBasicProp | undefined): string[] {\r\n    // 获取当前浏览器该类型的缓存的所有key值，组装为一个数组\r\n    const keyArr: string[] = [] // 存储临时筛选结果的数组\r\n    const getKeys: string[] = [] // 临时存储缓存keys的数组\r\n    const resArr: string[] = [] // 返回有效的keys数组\r\n    // 判断缓存类型\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      const keys = Object.keys(Cookies.get())\r\n      getKeys.push(...keys)\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      const keys = Object.keys(Instance)\r\n      getKeys.push(...keys)\r\n    }\r\n\r\n    if (options && isObject(options)) {\r\n      const plen = Object.keys(options).length\r\n      const pre = options.prefix ?? this.prefix\r\n      const lsign = options.linkSign ?? this.linkSign\r\n      const suf = options.suffix ?? this.suffix\r\n\r\n      if (plen >= 3) {\r\n        // 3个参数 1种情况\r\n        getKeys.forEach((val) => {\r\n          if (val.includes(pre + lsign) && val.includes(lsign + suf)) {\r\n            keyArr.push(val)\r\n          }\r\n        })\r\n      } else if (plen >= 2) {\r\n        // 2个参数 p+l\\p+s\\l+s\\ 3种情况\r\n        if (options.prefix && options.suffix && !options.linkSign) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(pre + lsign) && val.includes(lsign + suf)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.prefix && options.linkSign && !options.suffix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(pre + lsign)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.linkSign && options.suffix && !options.prefix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(lsign + suf)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        // 1个参数 p\\l\\s  3种情况\r\n        if (options.prefix && !options.linkSign && !options.suffix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(pre)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.linkSign && !options.prefix && !options.suffix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(lsign)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.suffix && !options.linkSign && !options.prefix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(suf)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        }\r\n      }\r\n    } else {\r\n      keyArr.push(...getKeys)\r\n    }\r\n\r\n    let InsGet: Function\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      InsGet = (key:string) => Cookies.get(key)\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      InsGet = (key:string) => Instance.getItem(key)\r\n    }\r\n\r\n    if (keyArr.length > 0) {\r\n      // 过滤无效的keys\r\n      for (let i = 0; i < keyArr.length; i++) {\r\n        let val = keyArr[i]\r\n        // 判断缓存值的过期时间是否已经过期\r\n\r\n        let isTrue = !getValidValue(InsGet(val))\r\n        if (isTrue) {\r\n          // 如果过期，则继续遍历下一个\r\n          continue\r\n        } else {\r\n          // 如果有效则添加到结果数组中\r\n          resArr.push(val)\r\n        }\r\n      }\r\n    }\r\n\r\n    return resArr\r\n  }\r\n  clearFun(\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ): void {\r\n    let resArr: string[] = []\r\n\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      let cookieOpt = {}\r\n        \r\n      if (options) {\r\n        resArr = [...this.allKey(options)]\r\n        OptionsCookieProp.forEach((key) => {\r\n          if (!isUndefined(options[key])) {\r\n            cookieOpt[key] = options[key]\r\n          }\r\n        })\r\n      } else {\r\n        resArr = [...this.allKey()]\r\n      }\r\n      if (resArr.length > 0) { \r\n        if (Object.keys(cookieOpt).length === 0) {\r\n          resArr.forEach((val) => Cookies.remove(val))\r\n        } else {\r\n          resArr.forEach((val) => Cookies.remove(val, cookieOpt))\r\n        }\r\n      }\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      if (options) {\r\n        resArr = [...this.allKey(options)]\r\n        if (resArr.length > 0) {\r\n          resArr.forEach((val) => Instance.removeItem(val))\r\n        }\r\n      } else {\r\n        Instance.clear()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 拼接key\r\nfunction jointKey(keyOpt: jointParamsType): string {\r\n  let rtnKey: string = ''\r\n\r\n  if (keyOpt.linkSign.trim()) {\r\n    if (keyOpt.prefix.trim()) {\r\n      rtnKey += keyOpt.prefix + keyOpt.linkSign\r\n    }\r\n\r\n    rtnKey += keyOpt.key\r\n\r\n    if (keyOpt.suffix.trim()) {\r\n      rtnKey += keyOpt.linkSign + keyOpt.suffix\r\n    }\r\n  } else {\r\n    rtnKey = keyOpt.key.trim()\r\n  }\r\n\r\n  return rtnKey\r\n}\r\n\r\n// 判断存储值是否有效\r\nfunction getValidValue(val: unknown): boolean {\r\n  let rtnData: boolean = true\r\n\r\n  if (isString(val)) {\r\n    if (isJson(val)) {\r\n      const data = JSON.parse(val as string)\r\n      if (data._tj_expireTime && data._tj_expireTime < Date.now()) {\r\n        rtnData = false\r\n      }\r\n    }\r\n  } else {\r\n    rtnData = false\r\n  }\r\n\r\n  return rtnData\r\n}\r\n\r\nfunction newStorage(type: StorageType, options?: IComCookieBasicProp) {\r\n\r\n  return new ComStorage(type,options)\r\n}\r\n\r\nexport {newStorage}","// 1、计算字符串中指定字符出现的次数\r\nconst charInCounts = (str: string, char: string):number => {\r\n  return str.split(char).length -1\r\n}\r\n\r\n\r\nexport {charInCounts}","// 手机号正则\r\nconst REP_MOBILE= /^(?:(?:\\+|00)86)?1(?:(?:3[\\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\\d])|(?:9[189]))\\d{8}$/\r\n\r\nexport {REP_MOBILE}\r\n\r\n","import {REP_MOBILE} from '../../common/RegExpMap'\r\n\r\n/**\r\n * @description 手机号脱敏处理(Desensitization treatment mobile)\r\n * @param [strng] mobile \r\n * @returns[string] 返回处理后的手机号\r\n */\r\nconst DTMoblie = (mobile:string):string => {\r\n  let rtnStr:string = ''\r\n  if (typeof mobile === \"string\") {\r\n    if (REP_MOBILE.test(mobile)) {\r\n      rtnStr = mobile.replace(/^(\\d{3})\\d{4}(\\d{4})$/, \"$1****$2\")\r\n    } else {\r\n      console.warn('请输入一个正确的手机号')\r\n    }\r\n  } else {\r\n    console.warn('请输入一个字符串格式的手机号')\r\n  }\r\n  return rtnStr\r\n}\r\n\r\nexport {DTMoblie}","type RFS =\r\n  | 'requestFullscreen'\r\n  | 'webkitRequestFullScreen'\r\n  | 'mozRequestFullScreen'\r\n  | 'msRequestFullscreen'\r\ntype EFS =\r\n  | 'exitFullscreen'\r\n  | 'webkitExitFullscreen'\r\n  | 'webkitCancelFullScreen'\r\n  | 'mozCancelFullScreen'\r\n  | 'msExitFullscreen'\r\ntype FSEL =\r\n  | 'fullscreenElement'\r\n  | 'webkitFullscreenElement'\r\n  | 'webkitCurrentFullScreenElement'\r\n  | 'mozFullScreenElement'\r\n  | 'msFullscreenElement'\r\ntype FSENAB =\r\n  | 'fullscreenEnabled'\r\n  | 'webkitFullscreenEnabled'\r\n  | 'webkitCancelFullScreen'\r\n  | 'mozFullScreenEnabled'\r\n  | 'msFullscreenEnabled'\r\ntype FSC =\r\n  | 'fullscreenchange'\r\n  | 'webkitfullscreenchange'\r\n  | 'mozfullscreenchange'\r\n  | 'MSFullscreenChange'\r\ntype FCE =\r\n  | 'fullscreenerror'\r\n  | 'webkitfullscreenerror'\r\n  | 'mozfullscreenerror'\r\n  | 'MSFullscreenError'\r\ntype FunctionMap = [RFS, EFS, FSEL, FSENAB, FSC, FCE]\r\n\r\nconst FunMap: FunctionMap[] = [\r\n  [\r\n    'requestFullscreen',\r\n    'exitFullscreen',\r\n    'fullscreenElement',\r\n    'fullscreenEnabled',\r\n    'fullscreenchange',\r\n    'fullscreenerror',\r\n  ],\r\n  // New WebKit\r\n  [\r\n    'webkitRequestFullscreen' as RFS,\r\n    'webkitExitFullscreen',\r\n    'webkitFullscreenElement',\r\n    'webkitFullscreenEnabled',\r\n    'webkitfullscreenchange',\r\n    'webkitfullscreenerror',\r\n  ],\r\n  // Old WebKit\r\n  [\r\n    'webkitRequestFullScreen',\r\n    'webkitCancelFullScreen',\r\n    'webkitCurrentFullScreenElement',\r\n    'webkitCancelFullScreen',\r\n    'webkitfullscreenchange',\r\n    'webkitfullscreenerror',\r\n  ],\r\n  [\r\n    'mozRequestFullScreen',\r\n    'mozCancelFullScreen',\r\n    'mozFullScreenElement',\r\n    'mozFullScreenEnabled',\r\n    'mozfullscreenchange',\r\n    'mozfullscreenerror',\r\n  ],\r\n  [\r\n    'msRequestFullscreen',\r\n    'msExitFullscreen',\r\n    'msFullscreenElement',\r\n    'msFullscreenEnabled',\r\n    'MSFullscreenChange',\r\n    'MSFullscreenError',\r\n  ],\r\n]\r\ntype FunType = {\r\n  requestFullscreen: RFS\r\n  exitFullscreen: EFS\r\n  fullscreenElement: FSEL\r\n  fullscreenEnabled: FSENAB\r\n  fullscreenchange: FSC\r\n  fullscreenerror: FCE\r\n}\r\n\r\nconst defaultFunMap: FunctionMap = FunMap[0]\r\nlet FunAPI: FunType = {\r\n  requestFullscreen: 'requestFullscreen',\r\n  exitFullscreen: 'exitFullscreen',\r\n  fullscreenElement: 'fullscreenElement',\r\n  fullscreenEnabled: 'fullscreenEnabled',\r\n  fullscreenchange: 'fullscreenchange',\r\n  fullscreenerror: 'fullscreenerror',\r\n}\r\n\r\nfor (const fmap of FunMap) {\r\n  if (fmap[1] in document) {\r\n    for (const [idx, fun] of FunMap.entries()) {\r\n      FunAPI[defaultFunMap[idx]] = fun\r\n    }\r\n  }\r\n}\r\n\r\ntype FullEvent = {\r\n  change: FSC\r\n  error: FCE\r\n}\r\n\r\nconst eventNameMap: FullEvent = {\r\n  change: FunAPI.fullscreenchange,\r\n  error: FunAPI.fullscreenerror,\r\n}\r\n\r\nconst isFull = (): boolean => Boolean(document[FunAPI.fullscreenElement])\r\n\r\nconst getFullEl = (): Element | undefined =>\r\n  document[FunAPI.fullscreenElement] ?? undefined\r\n\r\nconst isFullEnabled = (): boolean => Boolean(document[FunAPI.fullscreenEnabled])\r\n\r\nconst openFull = (\r\n  el: Element = document.documentElement,\r\n  options: FullscreenOptions = {\r\n    navigationUI: 'auto',\r\n  }\r\n): Promise<void> => {\r\n  return el[FunAPI.exitFullscreen](options)\r\n}\r\n\r\nconst closeFull = (): Promise<void> => {\r\n  return document[FunAPI.exitFullscreen]()\r\n}\r\n\r\nconst toggleFull = (\r\n  el: Element = document.documentElement,\r\n  options: FullscreenOptions = {\r\n    navigationUI: 'auto',\r\n  }\r\n) => (isFull() ? openFull(el, options) : closeFull())\r\n\r\nexport { isFull, getFullEl, isFullEnabled, openFull, closeFull, toggleFull }\r\n"],"names":["paramsNullError","prefix","customTxt","deaInfo","console","error","Error","isBasicType","type","params","String","toLocaleLowerCase","value","arguments","length","isJson","obj","JSON","parse","e","log","isBoolean","isNumber","isString","isUndefined","isSymbol","isBigint","isNumType","name","flag","Number","isFloat","y","indexOf","isInfinite","isFinite","isInt","isNaN","objTypeMap","isObjType","pType","Object","prototype","toString","call","isNull","isArray","isObject","isDate","isFunction","simpleTypeArr","getType","warn","rtnStr","typeStr","typeFlag","includes","numT.isInt","numT.isFloat","numT.isNaN","numT.isInfinite","objT.isNull","objT.isObject","objT.isArray","objT.isFunction","objT.isDate","getArrayAllType","rtnArr","i","val","push","getArrayTypeDetail","selectType","resArr","selectArr","allArr","index","getObjectAllType","key","hasOwnProperty","getObjectTypeDetail","ParseUrlFunction","splitType","getUrlParamsOfSplit","URLSearchParamsType","url","urlStr","split","urlSearchParams","URLSearchParams","fromEntries","entries","RegExpType","result","replace","$","$1","$2","DecodeUrlType","noneType","decodeURIType","decodeURI","decodeURIComponentType","decodeURIComponent","EncodeUrlType","encodeURIType","encodeURI","encodeURIComponent","ConverParamsConfig","_a","globalThis","location","href","hashValue","encodeUrlType","config","_b","search","parseUrlType","decodeUrlType","getUrlParams","options","paramsObj","opt","keyStr","assign","urlArr","substring","lastIndexOf","converParamsToUrl","urlParams","paramsArr","forEach","param","trim","oldParamsObj","newParamsObj","newParamsArr","join","len","arr","target","source","api","init","converter","defaultAttributes","set","attributes","document","expires","Date","now","toUTCString","escape","stringifiedAttributes","attributeName","cookie","write","create","get","cookies","jar","parts","slice","foundKey","read","remove","withAttributes","this","withConverter","freeze","path","StorageTypeInstance","Cookies","local","localStorage","session","sessionStorage","FormatUnitTime","ms","s","min","h","d","w","m","OptionsCookieProp","OptionsDefaultProp","ComStorage","constructor","suffix","linkSign","expireTime","unitTime","secure","sameSite","instanceType","setFun","Config","jointKey","dataExpTime","getTime","stringify","cookieOpt","saveData","_tj_value","_tj_expireTime","setItem","getFun","rtnData","getCookieData","Instance","tempData","getItem","nowTime","getStorageData","delFun","keys","removeItem","existFun","allKey","keyArr","getKeys","plen","pre","lsign","suf","_c","InsGet","getValidValue","clearFun","clear","keyOpt","rtnKey","data","newStorage","charInCounts","str","char","REP_MOBILE","DTMoblie","mobile","test","FunMap","defaultFunMap","FunAPI","requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror","fmap","idx","fun","isFull","Boolean","getFullEl","undefined","isFullEnabled","openFull","el","documentElement","navigationUI","closeFull","toggleFull"],"mappings":"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"}