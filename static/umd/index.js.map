{"version":3,"file":"index.js","sources":["../../src/common/paramUtils.ts","../../src/type_tool/basic/index.ts","../../src/type_tool/numDel/index.ts","../../src/type_tool/objDel/index.ts","../../src/type_tool/complexFun/index.ts","../../src/url_tool/index.ts","../../node_modules/js-cookie/dist/js.cookie.mjs","../../src/storage_tool/index.ts","../../src/str_tool/index.ts"],"sourcesContent":["\r\nfunction paramsNullError (prefix:string = '',customTxt?:string) {\r\n  let deaInfo = '参数不能为空！'\r\n  if (prefix) {\r\n    deaInfo = prefix + deaInfo\r\n  }\r\n  if (customTxt) {\r\n    deaInfo = customTxt\r\n  }\r\n  console.error(deaInfo)\r\n  throw Error(deaInfo)\r\n}\r\n\r\nexport {paramsNullError}","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nconst isBasicType = function isType(type: string) {\r\n  const params = String(type).toLocaleLowerCase()\r\n  return function basicType(value: unknown): boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${type}方法的`)\r\n    }\r\n\r\n    return typeof value === params\r\n  }\r\n}\r\nfunction isJson(value: unknown): boolean {\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isJson方法的`)\r\n  }\r\n  if (typeof value === 'string') {\r\n    try {\r\n      let obj = JSON.parse(value)\r\n      if (typeof obj == 'object' && obj) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    } catch (e) {\r\n      console.log('error：' + value + '!!!' + e)\r\n      return false\r\n    }\r\n  }\r\n  return false\r\n}\r\nconst isBoolean = isBasicType('Boolean')\r\nconst isNumber = isBasicType('Number')\r\nconst isString = isBasicType('String')\r\nconst isUndefined = isBasicType('Undefined')\r\nconst isSymbol = isBasicType('Symbol')\r\nconst isBigint = isBasicType('Bigint')\r\nexport { isBoolean, isNumber, isString, isUndefined, isSymbol, isBigint, isJson }\r\n","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nfunction isNumType(name:string,type:string) {\r\n\r\n  return function (value:unknown):boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${name}方法的`)\r\n    } \r\n    let flag = typeof value === 'number'\r\n    return (flag && Number[`is${type}`](value))\r\n  }\r\n}\r\n\r\nfunction isFloat(params: unknown): boolean {\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isFloat方法的`)\r\n  }\r\n  let flag = typeof params === 'number'\r\n  let y = String(params).indexOf('.') + 1 // 获取小数点后的个数\r\n\r\n  return (flag && (y>0))\r\n}\r\n\r\nfunction isInfinite(params:unknown):boolean{\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isInfinite方法的`)\r\n  } \r\n  let flag = typeof params === 'number'\r\n  return (flag && !Number.isFinite(params))\r\n}\r\n\r\nconst isInt = isNumType('Int','Integer')\r\nconst isFinite = isNumType('Finite','Finite')\r\nconst isNaN = isNumType('NaN','NaN')\r\n\r\nexport {isFloat,isInt,isFinite,isNaN,isInfinite}","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nconst objTypeMap = { \r\n  nullT:'[object Null]',\r\n  ObjectT:'[object Object]',\r\n  ArrayT:'[object Array]',\r\n  DateT:'[object Date]',\r\n  FunctionT:'[object Function]',\r\n}\r\n \r\n\r\nfunction isObjType(name:string,type:string) {\r\n\r\n  return function (value:unknown):boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${name}方法的`)\r\n    } \r\n    let pType = Object.prototype.toString.call(value)    \r\n    return pType === type\r\n  }\r\n}\r\n\r\nconst isNull = isObjType('Null',objTypeMap.nullT)\r\nconst isArray = isObjType('Array',objTypeMap.ArrayT)\r\nconst isObject = isObjType('Object',objTypeMap.ObjectT)\r\nconst isDate = isObjType('Date',objTypeMap.DateT)\r\nconst isFunction = isObjType('Function',objTypeMap.FunctionT)\r\n\r\nexport {isNull,isArray,isDate,isFunction,isObject}\r\n\r\n","import * as numT from '../numDel'\r\nimport * as objT from '../objDel'\r\nimport {paramsNullError} from '../../common/paramUtils'\r\n\r\ntype returnTypeStr =\r\n  | 'string'\r\n  | 'bigint'\r\n  | 'boolean'\r\n  | 'symbol'\r\n  | 'undefined'\r\n  | 'object'\r\n  | 'function'\r\n  | 'array'\r\n  | 'object'\r\n  | 'date'\r\n  | 'null'\r\n  | 'int'\r\n  | 'float'\r\n  | 'infinite'\r\n  | 'NaN'\r\n\r\ntype arrayTypeDetail = {\r\n  index: string | number\r\n  value: any\r\n  type: returnTypeStr\r\n}\r\n\r\ntype objectTypeDetail = {\r\n  key: string\r\n  value: any\r\n  type: returnTypeStr\r\n}\r\n\r\n// 定义一个typeof可以直接判断出来的单一类型数组\r\nlet simpleTypeArr = [\r\n  'string',\r\n  'bigint',\r\n  'boolean',\r\n  'symbol',\r\n  'undefined',\r\n  'function',\r\n]\r\n\r\nfunction getType(params: unknown): returnTypeStr {\r\n  if (arguments.length === 0) {\r\n    console.warn('getType方法没有接收到参数,返回的类型为undefined')\r\n    return 'undefined'\r\n  }\r\n  let rtnStr: returnTypeStr | 'number' = 'string'\r\n  let typeStr: returnTypeStr | 'number' = typeof params\r\n  let typeFlag = simpleTypeArr.includes(typeStr)\r\n\r\n  if (typeFlag) {\r\n    rtnStr = typeStr\r\n  } else {\r\n    if (typeStr === 'number') {\r\n      if (numT.isInt(params)) {\r\n        rtnStr = 'int'\r\n      } else if (numT.isFloat(params)) {\r\n        rtnStr = 'float'\r\n      } else if (numT.isNaN(params)) {\r\n        rtnStr = 'NaN'\r\n      } else if (numT.isInfinite(params)) {\r\n        rtnStr = 'infinite'\r\n      }\r\n    } else if (typeStr === 'object') {\r\n      if (objT.isNull(params)) {\r\n        rtnStr = 'null'\r\n      } else if (objT.isObject(params)) {\r\n        rtnStr = 'object'\r\n      } else if (objT.isArray(params)) {\r\n        rtnStr = 'array'\r\n      } else if (objT.isFunction(params)) {\r\n        rtnStr = 'function'\r\n      } else if (objT.isDate(params)) {\r\n        rtnStr = 'date'\r\n      }\r\n    }\r\n  }\r\n\r\n  return rtnStr as returnTypeStr\r\n}\r\n\r\nfunction getArrayAllType(params: any[]): returnTypeStr[] {\r\n  if (!objT.isArray(params)) {\r\n    paramsNullError(\"\",\"getArrayAllType方法接收的参数应该是一个数组\")\r\n  }\r\n  let rtnArr: returnTypeStr[] = []\r\n  if (arguments.length > 0 && params.length > 0) {\r\n    for (let i = 0; i < params.length; i++) {\r\n      let val = params[i]\r\n      rtnArr.push(getType(val))\r\n    }\r\n  } \r\n  return rtnArr\r\n}\r\n\r\nfunction getArrayTypeDetail(params: any[],selectType?: returnTypeStr | 'number'): arrayTypeDetail[] {\r\n  if (!objT.isArray(params)) {\r\n    paramsNullError(\"\",\"getArrayTypeDetail方法接收的参数应该是一个数组\")\r\n  }\r\n  let resArr: arrayTypeDetail[] = []\r\n  if (arguments.length > 0) {\r\n    let selectArr: arrayTypeDetail[] = []\r\n    let allArr: arrayTypeDetail[] = []\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      let index = i\r\n      let value = params[i]\r\n      let type:returnTypeStr = getType(value)\r\n\r\n      allArr.push({ index, value, type })\r\n\r\n      if (selectType) {\r\n        if (selectType === 'number' && (['int','float'].includes(type))) {\r\n          selectArr.push({ index, value, type })\r\n        } else if(selectType === type) {\r\n          selectArr.push({ index, value, type })\r\n        }\r\n        continue\r\n      }\r\n    }\r\n\r\n    if (selectType) {\r\n      resArr = [...selectArr]\r\n    } else {\r\n      resArr = [...allArr]\r\n    }\r\n  }\r\n\r\n  return resArr\r\n}\r\n\r\nfunction getObjectAllType(params: object):returnTypeStr[] {\r\n  if (!objT.isObject(params)) {\r\n    paramsNullError(\"\",\"getObjectAllType方法接收的参数应该是一个对象\")\r\n  }\r\n  let resArr:returnTypeStr[] = []\r\n  if (arguments.length > 0) {\r\n\r\n    for (const key in params) {\r\n      if (Object.hasOwnProperty.call(params, key)) {\r\n        let val = params[key]\r\n        resArr.push(getType(val))\r\n      }\r\n    }\r\n  }\r\n\r\n  return resArr\r\n}\r\n\r\nfunction getObjectTypeDetail(params:object, selectType?:returnTypeStr | 'number'):objectTypeDetail[] {\r\n  if (!objT.isObject(params)) {\r\n    paramsNullError(\"\",\"getObjectTypeDetail方法接收的参数应该是一个对象\")\r\n  }\r\n  let resArr:objectTypeDetail[] = []\r\n  if (arguments.length > 0) {\r\n   \r\n    let selectArr:objectTypeDetail[] = []\r\n    let allArr:objectTypeDetail[] = []\r\n\r\n    for (const key in params) {\r\n        \r\n      if (Object.hasOwnProperty.call(params, key)) {\r\n        let value = params[key]\r\n        let type = getType(value)\r\n\r\n        allArr.push({ key, value, type })\r\n\r\n        if (selectType) {\r\n          if (selectType === 'number' && (['int','float'].includes(type))) {\r\n            selectArr.push({ key, value, type })\r\n          } else if(selectType === type) {\r\n            selectArr.push({ key, value, type })\r\n          }\r\n        }\r\n        continue\r\n        \r\n      }\r\n    }\r\n   \r\n    if (selectType) {\r\n      resArr = [...selectArr]\r\n    } else {\r\n      resArr = [...allArr]\r\n    }\r\n  }\r\n \r\n  return resArr\r\n}\r\n\r\nexport { getType, getArrayAllType, getArrayTypeDetail, getObjectAllType, getObjectTypeDetail }\r\n","import { paramsNullError } from '../common/paramUtils'\r\ninterface IParamsType {\r\n  [key: string]: string\r\n}\r\n\r\ntype parseUrlType = 'splitType' | 'URLSearchParamsType' | 'RegExpType'\r\ntype decodeUrlType = 'noneType' | 'decodeURIType' | 'decodeURIComponentType'\r\ntype encodeUrlType = 'noneType' | 'encodeURIType' | 'encodeURIComponentType'\r\ninterface IParseUrlFunction {\r\n  [key: string]: (url: string) => IParamsType\r\n}\r\n\r\nconst ParseUrlFunction: IParseUrlFunction = {\r\n  splitType: getUrlParamsOfSplit,\r\n  URLSearchParamsType: getUrlParamsOfURLSearchParams,\r\n  RegExpType: getUrlParamsOfRegExp,\r\n}\r\n\r\nconst DecodeUrlType = {\r\n  noneType: (url: string) => url,\r\n  decodeURIType: decodeURI,\r\n  decodeURIComponentType: decodeURIComponent,\r\n}\r\n\r\nconst EncodeUrlType = {\r\n  noneType: (url: string) => url,\r\n  encodeURIType: encodeURI,\r\n  encodeURIComponent: encodeURIComponent,\r\n}\r\n\r\ninterface IConverParamsConfig {\r\n  url: string\r\n  hashValue: string\r\n  encodeUrlType: encodeUrlType\r\n}\r\n\r\nconst ConverParamsConfig: IConverParamsConfig = {\r\n  url: globalThis?.location?.href,\r\n  hashValue: '',\r\n  encodeUrlType: 'noneType',\r\n}\r\n\r\ninterface IGetUrlParamsConfig {\r\n  url: string\r\n  parseUrlType: parseUrlType\r\n  decodeUrlType: decodeUrlType\r\n}\r\nconst config: IGetUrlParamsConfig = {\r\n  url: globalThis?.location?.search,\r\n  parseUrlType: 'splitType',\r\n  decodeUrlType: 'noneType',\r\n}\r\nfunction getUrlParams(): IParamsType\r\nfunction getUrlParams(key?: string): string\r\nfunction getUrlParams(options?: IGetUrlParamsConfig): IParamsType\r\nfunction getUrlParams(\r\n  key?: string,\r\n  options?: IGetUrlParamsConfig\r\n): IParamsType | string\r\n\r\nfunction getUrlParams(\r\n  key?: unknown,\r\n  options?: IGetUrlParamsConfig\r\n): IParamsType | string {\r\n  let paramsObj = {}\r\n  let opt: IGetUrlParamsConfig = config\r\n  let keyStr: string = ''\r\n  let urlStr: string = ''\r\n\r\n  if (typeof arguments[0] === 'string') {\r\n    keyStr = arguments[0]\r\n  } else if (typeof arguments[0] === 'object') {\r\n    opt = { ...config, ...arguments[0] }\r\n  }\r\n\r\n  if (typeof arguments[1] === 'object') {\r\n    opt = { ...config, ...arguments[1] }\r\n  }\r\n  urlStr = DecodeUrlType[opt.decodeUrlType](opt.url)\r\n\r\n  if (urlStr.includes('?')) {\r\n    let urlArr: string[] = urlStr.split('?')\r\n    if (urlArr[1].includes('#')) {\r\n      urlStr = '?' + urlArr[1].substring(0, urlArr[1].lastIndexOf('#'))\r\n    }\r\n  }\r\n  paramsObj = ParseUrlFunction[opt.parseUrlType](urlStr)\r\n\r\n  if (keyStr) {\r\n    return paramsObj[keyStr]\r\n  }\r\n\r\n  return paramsObj\r\n}\r\n\r\nfunction converParamsToUrl(urlParams: object): string\r\nfunction converParamsToUrl(\r\n  urlParams: object,\r\n  options?: IConverParamsConfig\r\n): string\r\n\r\nfunction converParamsToUrl(\r\n  urlParams: object,\r\n  options?: IConverParamsConfig\r\n): string {\r\n  if (arguments.length === 0) {\r\n    paramsNullError('converParamsToUrl方法的')\r\n  }\r\n  let urlStr: string = ''\r\n  let paramsArr: string[] = []\r\n  let opt: IConverParamsConfig = ConverParamsConfig\r\n\r\n  if (options) {\r\n    opt = { ...opt, ...options }\r\n  }\r\n\r\n  if (Object.prototype.toString.call(urlParams) === '[object Object]') {\r\n    Object.entries(urlParams).forEach(([key, value]) => {\r\n      let param = key + '=' + EncodeUrlType[opt.encodeUrlType](value)\r\n      paramsArr.push(param)\r\n    })\r\n  } else {\r\n    console.warn('拼接ur的参数格式必须是一个对象类型的数据！')\r\n  }\r\n\r\n  if (opt.url.includes('?')) {\r\n    let urlArr: string[] = opt.url.split('?')\r\n    console.log(urlArr)\r\n    if (urlArr[1].includes('#')) {\r\n      urlStr =\r\n        urlArr[0] + '?' + urlArr[1].substring(0, urlArr[1].lastIndexOf('#'))\r\n\r\n      if (!opt.hashValue.trim()) {\r\n        opt.hashValue = urlArr[1].substring(urlArr[1].lastIndexOf('#'))\r\n      }\r\n    }\r\n    if (paramsArr.length > 0) {\r\n      const oldParamsObj: IParamsType = getUrlParamsOfSplit(urlStr)\r\n      const newParamsObj: IParamsType = { ...oldParamsObj, ...urlParams }\r\n      const newParamsArr: string[] = []\r\n\r\n      Object.entries(newParamsObj).forEach(([key, value]) => {\r\n        let param = key + '=' + EncodeUrlType[opt.encodeUrlType](value)\r\n        newParamsArr.push(param)\r\n      })\r\n      console.log(newParamsArr)\r\n      urlStr = urlArr[0] + '?' + newParamsArr.join('&') + opt.hashValue\r\n    } else {\r\n      urlStr = opt.url + opt.hashValue\r\n    }\r\n  } else {\r\n    if (opt.url.includes('#')) {\r\n      if (!opt.hashValue.trim()) {\r\n        opt.hashValue = opt.url.substring(opt.url.lastIndexOf('#'))\r\n      }\r\n      opt.url = opt.url.substring(0, opt.url.lastIndexOf('#'))\r\n    }\r\n    if (paramsArr.length > 0) {\r\n      urlStr = opt.url + '?' + paramsArr.join('&') + opt.hashValue\r\n    } else {\r\n      urlStr = opt.url + opt.hashValue\r\n    }\r\n  }\r\n\r\n  return urlStr\r\n}\r\n\r\nexport { getUrlParams, converParamsToUrl }\r\n\r\nfunction getUrlParamsOfSplit(url: string): IParamsType {\r\n  // 通过 ? 分割获取后面的参数字符串\r\n  let urlStr = url.split('?')[1]\r\n  // 创建空对象存储参数\r\n  let obj = {}\r\n  if (!urlStr) {\r\n    return obj\r\n  }\r\n  // 再通过 & 将每一个参数单独分割出来\r\n  let paramsArr = urlStr.split('&')\r\n  for (let i = 0, len = paramsArr.length; i < len; i++) {\r\n    // 再通过 = 将每一个参数分割为 key:value 的形式\r\n    let arr = paramsArr[i].split('=')\r\n    obj[arr[0]] = arr[1]\r\n  }\r\n  return obj\r\n}\r\n\r\nfunction getUrlParamsOfURLSearchParams(url: string): IParamsType {\r\n  let urlStr = url.split('?')[1]\r\n  const urlSearchParams = new URLSearchParams(urlStr)\r\n  const result = Object.fromEntries(urlSearchParams.entries())\r\n  return result\r\n}\r\n\r\nfunction getUrlParamsOfRegExp(url: string): IParamsType {\r\n  // \\w+ 表示匹配至少一个(数字、字母及下划线), [\\u4e00-\\u9fa5]+ 表示匹配至少一个中文字符\r\n  let pattern = /(\\w+|[\\u4e00-\\u9fa5]+)=(\\w+|[\\u4e00-\\u9fa5]+)/gi\r\n  let result = {}\r\n  url.replace(pattern, ($, $1, $2) => {\r\n    result[$1] = $2\r\n    return ''\r\n  })\r\n  return result\r\n}\r\n","/*! js-cookie v3.0.1 | MIT */\n/* eslint-disable no-var */\nfunction assign (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target\n}\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\nvar defaultConverter = {\n  read: function (value) {\n    if (value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n  },\n  write: function (value) {\n    return encodeURIComponent(value).replace(\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n      decodeURIComponent\n    )\n  }\n};\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\n\nfunction init (converter, defaultAttributes) {\n  function set (key, value, attributes) {\n    if (typeof document === 'undefined') {\n      return\n    }\n\n    attributes = assign({}, defaultAttributes, attributes);\n\n    if (typeof attributes.expires === 'number') {\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n    }\n    if (attributes.expires) {\n      attributes.expires = attributes.expires.toUTCString();\n    }\n\n    key = encodeURIComponent(key)\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    var stringifiedAttributes = '';\n    for (var attributeName in attributes) {\n      if (!attributes[attributeName]) {\n        continue\n      }\n\n      stringifiedAttributes += '; ' + attributeName;\n\n      if (attributes[attributeName] === true) {\n        continue\n      }\n\n      // Considers RFC 6265 section 5.2:\n      // ...\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n      //     character:\n      // Consume the characters of the unparsed-attributes up to,\n      // not including, the first %x3B (\";\") character.\n      // ...\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n    }\n\n    return (document.cookie =\n      key + '=' + converter.write(value, key) + stringifiedAttributes)\n  }\n\n  function get (key) {\n    if (typeof document === 'undefined' || (arguments.length && !key)) {\n      return\n    }\n\n    // To prevent the for loop in the first place assign an empty array\n    // in case there are no cookies at all.\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\n    var jar = {};\n    for (var i = 0; i < cookies.length; i++) {\n      var parts = cookies[i].split('=');\n      var value = parts.slice(1).join('=');\n\n      try {\n        var foundKey = decodeURIComponent(parts[0]);\n        jar[foundKey] = converter.read(value, foundKey);\n\n        if (key === foundKey) {\n          break\n        }\n      } catch (e) {}\n    }\n\n    return key ? jar[key] : jar\n  }\n\n  return Object.create(\n    {\n      set: set,\n      get: get,\n      remove: function (key, attributes) {\n        set(\n          key,\n          '',\n          assign({}, attributes, {\n            expires: -1\n          })\n        );\n      },\n      withAttributes: function (attributes) {\n        return init(this.converter, assign({}, this.attributes, attributes))\n      },\n      withConverter: function (converter) {\n        return init(assign({}, this.converter, converter), this.attributes)\n      }\n    },\n    {\n      attributes: { value: Object.freeze(defaultAttributes) },\n      converter: { value: Object.freeze(converter) }\n    }\n  )\n}\n\nvar api = init(defaultConverter, { path: '/' });\n/* eslint-enable no-var */\n\nexport default api;\n","import Cookies from 'js-cookie'\r\nimport { isUndefined, isJson, isString } from '../type_tool/basic'\r\nimport { isObject } from '../type_tool/objDel'\r\n\r\ntype UnitTimeType = 'ms' | 's' | 'min' | 'h' | 'd' | 'w' | 'm' | 'y'\r\ntype IFormatUnitTime = {\r\n  [key in UnitTimeType]: number\r\n}\r\ntype StorageType = 'cookie' | 'local' | 'session'\r\n\r\ntype StorageInstanceType = {\r\n  [key in StorageType]: Cookies.CookiesStatic | Storage\r\n}\r\n\r\ninterface IComStorageBasicProp {\r\n  prefix?: string\r\n  suffix?: string\r\n  linkSign?: string\r\n}\r\n\r\ninterface IComStorageSetProp extends IComStorageBasicProp {\r\n  // isReset?: boolean\r\n  expireTime?: number\r\n  unitTime?: UnitTimeType\r\n}\r\n\r\ninterface IComCookieBasicProp extends IComStorageSetProp {\r\n  expires?: number | Date\r\n  path?: string\r\n  domain?: string\r\n  secure?: boolean\r\n  sameSite?: 'strict' | 'Strict' | 'lax' | 'Lax' | 'none' | 'None' | undefined\r\n  [property: string]: any\r\n}\r\ninterface jointParamsType {\r\n  key: string\r\n  prefix: string\r\n  suffix: string\r\n  linkSign: string\r\n}\r\n\r\ninterface IComStorageFun {\r\n  setFun(\r\n    key: string,\r\n    value: any,\r\n    options?: IComStorageSetProp | IComCookieBasicProp\r\n  ): void\r\n  getFun(key: string, options?: IComStorageBasicProp | IComCookieBasicProp): any\r\n  delFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp\r\n  ): void\r\n  existFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp\r\n  ): boolean\r\n  allKey(options?: IComStorageBasicProp | IComCookieBasicProp): string[]\r\n  clearFun(options?: IComStorageBasicProp | IComCookieBasicProp): void\r\n}\r\n\r\nconst StorageTypeInstance: StorageInstanceType = {\r\n  cookie: Cookies as Cookies.CookiesStatic,\r\n  local: localStorage as Storage,\r\n  session: sessionStorage as Storage,\r\n}\r\n\r\nconst FormatUnitTime: IFormatUnitTime = {\r\n  ms: 1,\r\n  s: 1000,\r\n  min: 60 * 1000,\r\n  h: 60 * 60 * 1000,\r\n  d: 864e5,\r\n  w: 7 * 864e5,\r\n  m: 30 * 864e5,\r\n  y: 365 * 864e5,\r\n}\r\nconst OptionsCookieProp = [\r\n  'expires',\r\n  'path',\r\n  'domain',\r\n  'secure',\r\n  'sameSite',\r\n]\r\nconst OptionsDefaultProp = [\r\n  'prefix',\r\n  'suffix',\r\n  'linkSign',\r\n  // 'isReset',\r\n  'expireTime',\r\n  'unitTime',\r\n  'expires',\r\n  'path',\r\n  'domain',\r\n  'secure',\r\n  'sameSite',\r\n]\r\n\r\nclass ComStorage implements IComStorageFun {\r\n  private instanceType: StorageType | undefined\r\n  private prefix: string = ''\r\n  private suffix: string = ''\r\n  private linkSign: string = '.'\r\n  // private isReset: boolean = true\r\n  private expireTime: number = -1\r\n  private unitTime: UnitTimeType = 'ms'\r\n\r\n  private expires: number | Date| undefined\r\n  private path: string |undefined = '/'\r\n  private domain: string | undefined\r\n  private secure: boolean | undefined = false\r\n  private sameSite:'strict'| 'Strict'|'lax'| 'Lax'| 'none'| 'None'| undefined = 'Lax'\r\n\r\n  constructor(\r\n    type: StorageType,\r\n    options?: IComStorageSetProp | IComCookieBasicProp | undefined\r\n  ) {\r\n    if (type && (type === 'cookie' || type === 'local' || type === 'session')) {\r\n      this.instanceType = type\r\n    } else {\r\n      throw Error(\r\n        '实例类型值类型是字符串类型，且值只能为 cookie或local或session'\r\n      )\r\n    }\r\n\r\n    if (options && isObject(options)) {\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        this[key] = value\r\n      })\r\n    }\r\n  }\r\n  setFun(\r\n    key: string,\r\n    value: any,\r\n    options?: IComStorageSetProp | IComCookieBasicProp | undefined\r\n  ): void {\r\n    if (arguments.length === 0) return\r\n    if (!isString(key) || !key.trim()) {\r\n      throw Error('浏览器存储的标识必须是字符串类型,且不能为空字符串！')\r\n    }\r\n\r\n    let Config: IComStorageSetProp | IComCookieBasicProp = {}\r\n\r\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\r\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]]\r\n    }\r\n\r\n    if (!isUndefined(options)) {\r\n      Config = { ...Config, ...options }\r\n    }\r\n\r\n    const jointKeyParams: jointParamsType = {\r\n      key,\r\n      prefix: Config.prefix as string,\r\n      linkSign: Config.linkSign as string,\r\n      suffix: Config.suffix as string,\r\n    }\r\n    key = jointKey(jointKeyParams)\r\n\r\n    const dataExpTime =\r\n      (Config.expireTime as number) * FormatUnitTime[Config.unitTime as string] +  new Date().getTime()\r\n    \r\n    console.log('time',dataExpTime)\r\n    if (!isString(value)) {\r\n      value = JSON.stringify(value)\r\n    }\r\n    if (this.instanceType === 'cookie') {\r\n      if (dataExpTime > 0) {\r\n        ;(Config as IComCookieBasicProp).expires = new Date(dataExpTime)\r\n      }\r\n      let cookieOpt = {}\r\n      OptionsCookieProp.forEach((key) => {\r\n        if (!isUndefined(Config[key])) {\r\n          cookieOpt[key] = Config[key]\r\n        }\r\n      })\r\n      // console.log(cookieOpt)\r\n      Cookies.set(key, value,cookieOpt)\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      // Instance.set(key, value,cookieOpt)\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      const saveData = {\r\n        _tj_value: value,\r\n        _tj_expireTime: dataExpTime,\r\n      }\r\n      Instance.setItem(key, encodeURIComponent(JSON.stringify(saveData)))\r\n    }\r\n  }\r\n  getFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ) {\r\n    if (arguments.length === 0) return\r\n    if (!isString(key) || !key.trim()) {\r\n      throw Error('浏览器存储的标识必须是字符串类型,且不能为空字符串！')\r\n    }\r\n\r\n    let Config: IComStorageBasicProp | IComCookieBasicProp = {}\r\n\r\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\r\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]]\r\n    }\r\n\r\n    if (!isUndefined(options)) {\r\n      Config = { ...Config, ...options }\r\n    }\r\n    const jointKeyParams: jointParamsType = {\r\n      key,\r\n      prefix: Config.prefix as string,\r\n      linkSign: Config.linkSign as string,\r\n      suffix: Config.suffix as string,\r\n    }\r\n    key = jointKey(jointKeyParams)\r\n\r\n    let rtnData: any = undefined\r\n\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      // const getCookieData = Instance.get(key)\r\n      const getCookieData = Cookies.get(key)\r\n      if (isString(getCookieData)) {\r\n        if (isJson(getCookieData)) {\r\n          rtnData = JSON.parse(getCookieData as string)\r\n        }\r\n\r\n        rtnData = getCookieData\r\n      }\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      let tempData =decodeURIComponent(Instance.getItem(key) as string) \r\n      if (isString(tempData)) {\r\n        if (isJson(tempData)) {\r\n          let nowTime = Date.now()\r\n          const getStorageData = JSON.parse(tempData)\r\n          if (\r\n            getStorageData &&\r\n            getStorageData._tj_expireTime &&\r\n            getStorageData._tj_expireTime > nowTime\r\n          ) {\r\n            if (getStorageData._tj_value && isJson(getStorageData._tj_value)) {\r\n              rtnData = JSON.parse(getStorageData._tj_value)\r\n            } else {\r\n              rtnData = getStorageData._tj_value\r\n            }\r\n          }\r\n        } else {\r\n          // 只是一个字符串\r\n          rtnData = tempData\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    return rtnData\r\n  }\r\n  delFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ): void {\r\n    if (arguments.length === 0) return\r\n    if (!isString(key) || !key.trim()) {\r\n      throw Error('浏览器存储的标识必须是字符串类型,且不能为空字符串！')\r\n    }\r\n\r\n    let Config: IComStorageSetProp | IComCookieBasicProp = {}\r\n\r\n    for (let i = 0; i < OptionsDefaultProp.length; i++) {\r\n      Config[OptionsDefaultProp[i]] = this[OptionsDefaultProp[i]]\r\n    }\r\n\r\n    if (!isUndefined(options)) {\r\n      Config = { ...Config, ...options }\r\n    }\r\n\r\n    const jointKeyParams: jointParamsType = {\r\n      key,\r\n      prefix: Config.prefix as string,\r\n      linkSign: Config.linkSign as string,\r\n      suffix: Config.suffix as string,\r\n    }\r\n    key = jointKey(jointKeyParams)\r\n\r\n    if (this.instanceType === 'cookie') {\r\n\r\n      let cookieOpt = {}\r\n      OptionsCookieProp.forEach((key) => {\r\n        if (!isUndefined(Config[key])) {\r\n          cookieOpt[key] = Config[key]\r\n        }\r\n      })\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      if (Object.keys(cookieOpt).length === 0) {\r\n        Cookies.remove(key)\r\n      } else {\r\n        Cookies.remove(key, cookieOpt)\r\n      }\r\n      \r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      Instance.removeItem(key)\r\n    }\r\n  }\r\n  existFun(\r\n    key: string,\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ): boolean {\r\n    let rtnData: any = undefined\r\n    if (options) {\r\n      rtnData = this.getFun(key, options)\r\n    } else {\r\n      rtnData = this.getFun(key)\r\n    }\r\n\r\n    return !!rtnData\r\n  }\r\n  allKey(options?: IComStorageBasicProp | undefined): string[] {\r\n    // 获取当前浏览器该类型的缓存的所有key值，组装为一个数组\r\n    const keyArr: string[] = [] // 存储临时筛选结果的数组\r\n    const getKeys: string[] = [] // 临时存储缓存keys的数组\r\n    const resArr: string[] = [] // 返回有效的keys数组\r\n    // 判断缓存类型\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      const keys = Object.keys(Cookies.get())\r\n      getKeys.push(...keys)\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      const keys = Object.keys(Instance)\r\n      getKeys.push(...keys)\r\n    }\r\n\r\n    if (options && isObject(options)) {\r\n      const plen = Object.keys(options).length\r\n      const pre = options.prefix ?? this.prefix\r\n      const lsign = options.linkSign ?? this.linkSign\r\n      const suf = options.suffix ?? this.suffix\r\n\r\n      if (plen >= 3) {\r\n        // 3个参数 1种情况\r\n        getKeys.forEach((val) => {\r\n          if (val.includes(pre + lsign) && val.includes(lsign + suf)) {\r\n            keyArr.push(val)\r\n          }\r\n        })\r\n      } else if (plen >= 2) {\r\n        // 2个参数 p+l\\p+s\\l+s\\ 3种情况\r\n        if (options.prefix && options.suffix && !options.linkSign) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(pre + lsign) && val.includes(lsign + suf)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.prefix && options.linkSign && !options.suffix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(pre + lsign)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.linkSign && options.suffix && !options.prefix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(lsign + suf)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        // 1个参数 p\\l\\s  3种情况\r\n        if (options.prefix && !options.linkSign && !options.suffix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(pre)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.linkSign && !options.prefix && !options.suffix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(lsign)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        } else if (options.suffix && !options.linkSign && !options.prefix) {\r\n          getKeys.forEach((val) => {\r\n            if (val.includes(suf)) {\r\n              keyArr.push(val)\r\n            }\r\n          })\r\n        }\r\n      }\r\n    } else {\r\n      keyArr.push(...getKeys)\r\n    }\r\n\r\n    let InsGet: Function\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      InsGet = (key:string) => Cookies.get(key)\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      InsGet = (key:string) => Instance.getItem(key)\r\n    }\r\n\r\n    if (keyArr.length > 0) {\r\n      // 过滤无效的keys\r\n      for (let i = 0; i < keyArr.length; i++) {\r\n        let val = keyArr[i]\r\n        // 判断缓存值的过期时间是否已经过期\r\n\r\n        let isTrue = !getValidValue(InsGet(val))\r\n        if (isTrue) {\r\n          // 如果过期，则继续遍历下一个\r\n          continue\r\n        } else {\r\n          // 如果有效则添加到结果数组中\r\n          resArr.push(val)\r\n        }\r\n      }\r\n    }\r\n\r\n    return resArr\r\n  }\r\n  clearFun(\r\n    options?: IComStorageBasicProp | IComCookieBasicProp | undefined\r\n  ): void {\r\n    let resArr: string[] = []\r\n\r\n    if (this.instanceType === 'cookie') {\r\n      // const Instance = StorageTypeInstance['cookie'] as Cookies.CookiesStatic\r\n      let cookieOpt = {}\r\n        \r\n      if (options) {\r\n        resArr = [...this.allKey(options)]\r\n        OptionsCookieProp.forEach((key) => {\r\n          if (!isUndefined(options[key])) {\r\n            cookieOpt[key] = options[key]\r\n          }\r\n        })\r\n      } else {\r\n        resArr = [...this.allKey()]\r\n      }\r\n      if (resArr.length > 0) { \r\n        if (Object.keys(cookieOpt).length === 0) {\r\n          resArr.forEach((val) => Cookies.remove(val))\r\n        } else {\r\n          resArr.forEach((val) => Cookies.remove(val, cookieOpt))\r\n        }\r\n      }\r\n    } else {\r\n      const Instance = StorageTypeInstance[\r\n        this.instanceType as StorageType\r\n      ] as Storage\r\n      if (options) {\r\n        resArr = [...this.allKey(options)]\r\n        if (resArr.length > 0) {\r\n          resArr.forEach((val) => Instance.removeItem(val))\r\n        }\r\n      } else {\r\n        Instance.clear()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 拼接key\r\nfunction jointKey(keyOpt: jointParamsType): string {\r\n  let rtnKey: string = ''\r\n\r\n  if (keyOpt.linkSign.trim()) {\r\n    if (keyOpt.prefix.trim()) {\r\n      rtnKey += keyOpt.prefix + keyOpt.linkSign\r\n    }\r\n\r\n    rtnKey += keyOpt.key\r\n\r\n    if (keyOpt.suffix.trim()) {\r\n      rtnKey += keyOpt.linkSign + keyOpt.suffix\r\n    }\r\n  } else {\r\n    rtnKey = keyOpt.key.trim()\r\n  }\r\n\r\n  return rtnKey\r\n}\r\n\r\n// 判断存储值是否有效\r\nfunction getValidValue(val: unknown): boolean {\r\n  let rtnData: boolean = true\r\n\r\n  if (isString(val)) {\r\n    if (isJson(val)) {\r\n      const data = JSON.parse(val as string)\r\n      if (data._tj_expireTime && data._tj_expireTime < Date.now()) {\r\n        rtnData = false\r\n      }\r\n    }\r\n  } else {\r\n    rtnData = false\r\n  }\r\n\r\n  return rtnData\r\n}\r\n\r\nfunction newStorage(type: StorageType, options?: IComCookieBasicProp) {\r\n\r\n  return new ComStorage(type,options)\r\n}\r\n\r\nexport {newStorage}","// 1、计算字符串中指定字符出现的次数\r\nconst charInCounts = (str: string, char: string):number => {\r\n  return str.split(char).length -1\r\n}\r\n\r\n\r\n\r\nexport {charInCounts}"],"names":["paramsNullError","prefix","customTxt","deaInfo","console","error","Error","isBasicType","type","params","String","toLocaleLowerCase","value","arguments","length","isJson","obj","JSON","parse","e","log","isBoolean","isNumber","isString","isUndefined","isSymbol","isBigint","isNumType","name","flag","Number","isFloat","y","indexOf","isInfinite","isFinite","isInt","isNaN","objTypeMap","isObjType","pType","Object","prototype","toString","call","isNull","isArray","isObject","isDate","isFunction","simpleTypeArr","getType","warn","rtnStr","typeStr","typeFlag","includes","numT.isInt","numT.isFloat","numT.isNaN","numT.isInfinite","objT.isNull","objT.isObject","objT.isArray","objT.isFunction","objT.isDate","ParseUrlFunction","splitType","getUrlParamsOfSplit","URLSearchParamsType","url","urlStr","split","urlSearchParams","URLSearchParams","fromEntries","entries","RegExpType","result","replace","$","$1","$2","DecodeUrlType","noneType","decodeURIType","decodeURI","decodeURIComponentType","decodeURIComponent","EncodeUrlType","encodeURIType","encodeURI","encodeURIComponent","ConverParamsConfig","_a","globalThis","location","href","hashValue","encodeUrlType","config","_b","search","parseUrlType","decodeUrlType","paramsArr","i","len","arr","assign","target","source","key","api","init","converter","defaultAttributes","set","attributes","document","expires","Date","now","toUTCString","escape","stringifiedAttributes","attributeName","cookie","write","create","get","cookies","jar","parts","slice","join","foundKey","read","remove","withAttributes","this","withConverter","freeze","path","StorageTypeInstance","Cookies","local","localStorage","session","sessionStorage","FormatUnitTime","ms","s","min","h","d","w","m","OptionsCookieProp","OptionsDefaultProp","ComStorage","constructor","options","suffix","linkSign","expireTime","unitTime","secure","sameSite","instanceType","forEach","setFun","trim","Config","jointKey","dataExpTime","getTime","stringify","cookieOpt","saveData","_tj_value","_tj_expireTime","setItem","getFun","rtnData","getCookieData","Instance","tempData","getItem","nowTime","getStorageData","delFun","keys","removeItem","existFun","allKey","keyArr","getKeys","resArr","push","plen","pre","lsign","suf","_c","val","InsGet","getValidValue","clearFun","clear","keyOpt","rtnKey","data","str","char","urlParams","opt","param","urlArr","substring","lastIndexOf","oldParamsObj","newParamsObj","newParamsArr","rtnArr","selectType","selectArr","allArr","index","hasOwnProperty","paramsObj","keyStr"],"mappings":"2OACA,SAASA,EAAiBC,EAAgB,GAAGC,GAC3C,IAAIC,EAAU,UAQd,MAPIF,IACFE,EAAUF,EAASE,GAEjBD,IACFC,EAAUD,GAEZE,QAAQC,MAAMF,GACRG,MAAMH,EACd,CCTA,MAAMI,EAAc,SAAgBC,GAClC,MAAMC,EAASC,OAAOF,GAAMG,oBAC5B,OAAO,SAAmBC,GAKxB,OAJyB,IAArBC,UAAUC,QACZd,EAAgB,KAAKQ,eAGTI,IAAUH,CAC1B,CACF,EACA,SAASM,EAAOH,GAId,GAHyB,IAArBC,UAAUC,QACZd,EAAgB,aAEG,iBAAVY,EACT,IACE,IAAII,EAAMC,KAAKC,MAAMN,GACrB,QAAkB,iBAAPI,IAAmBA,EAQ/B,CAHC,MAAOG,GAEP,OADAf,QAAQgB,IAAI,SAAWR,EAAQ,MAAQO,IAChC,CACR,CAEH,OAAO,CACT,CACA,MAAME,EAAYd,EAAY,WACxBe,EAAWf,EAAY,UACvBgB,EAAWhB,EAAY,UACvBiB,EAAcjB,EAAY,aAC1BkB,EAAWlB,EAAY,UACvBmB,EAAWnB,EAAY,UClC7B,SAASoB,EAAUC,EAAYpB,GAE7B,OAAO,SAAUI,GACU,IAArBC,UAAUC,QACZd,EAAgB,KAAK4B,QAEvB,IAAIC,EAAwB,iBAAVjB,EAClB,OAAQiB,GAAQC,OAAO,KAAKtB,KAAQI,EACtC,CACF,CAEA,SAASmB,EAAQtB,GACU,IAArBI,UAAUC,QACZd,EAAgB,cAElB,IAAI6B,EAAyB,iBAAXpB,EACduB,EAAItB,OAAOD,GAAQwB,QAAQ,KAAO,EAEtC,OAAQJ,GAASG,EAAE,CACrB,CAEA,SAASE,EAAWzB,GACO,IAArBI,UAAUC,QACZd,EAAgB,iBAElB,IAAI6B,EAAyB,iBAAXpB,EAClB,OAAQoB,IAASC,OAAOK,SAAS1B,EACnC,CAEM,MAAA2B,EAAQT,EAAU,MAAM,WACxBQ,EAAWR,EAAU,SAAS,UAC9BU,EAAQV,EAAU,MAAM,OC/BxBW,EAEI,kBAFJA,EAGG,iBAHHA,EAIE,gBAJFA,EAKM,oBAIZ,SAASC,EAAUX,EAAYpB,GAE7B,OAAO,SAAUI,GACU,IAArBC,UAAUC,QACZd,EAAgB,KAAK4B,QAEvB,IAAIY,EAAQC,OAAOC,UAAUC,SAASC,KAAKhC,GAC3C,OAAO4B,IAAUhC,CACnB,CACF,CAEM,MAAAqC,EAASN,EAAU,OAnBjB,iBAoBFO,EAAUP,EAAU,QAAQD,GAC5BS,EAAWR,EAAU,SAASD,GAC9BU,EAAST,EAAU,OAAOD,GAC1BW,EAAaV,EAAU,WAAWD,GCQxC,IAAIY,EAAgB,CAClB,SACA,SACA,UACA,SACA,YACA,YAGF,SAASC,EAAQ1C,GACf,GAAyB,IAArBI,UAAUC,OAEZ,OADAV,QAAQgD,KAAK,oCACN,YAET,IAAIC,EAAmC,SACnCC,SAA2C7C,EAC3C8C,EAAWL,EAAcM,SAASF,GA8BtC,OA5BIC,EACFF,EAASC,EAEO,WAAZA,EACEG,EAAWhD,GACb4C,EAAS,MACAK,EAAajD,GACtB4C,EAAS,QACAM,EAAWlD,GACpB4C,EAAS,MACAO,EAAgBnD,KACzB4C,EAAS,YAEU,WAAZC,IACLO,EAAYpD,GACd4C,EAAS,OACAS,EAAcrD,GACvB4C,EAAS,SACAU,EAAatD,GACtB4C,EAAS,QACAW,EAAgBvD,GACzB4C,EAAS,WACAY,EAAYxD,KACrB4C,EAAS,SAKRA,CACT,SCrEA,MAAMa,EAAsC,CAC1CC,UAAWC,EACXC,oBA6KF,SAAuCC,GACrC,IAAIC,EAASD,EAAIE,MAAM,KAAK,GAC5B,MAAMC,EAAkB,IAAIC,gBAAgBH,GAE5C,OADe9B,OAAOkC,YAAYF,EAAgBG,UAEpD,EAjLEC,WAmLF,SAA8BP,GAE5B,IACIQ,EAAS,CAAA,EAKb,OAJAR,EAAIS,QAFU,mDAEO,CAACC,EAAGC,EAAIC,KAC3BJ,EAAOG,GAAMC,EACN,MAEFJ,CACT;+BAzLMK,EAAgB,CACpBC,SAAWd,GAAgBA,EAC3Be,cAAeC,UACfC,uBAAwBC,oBAGpBC,EAAgB,CACpBL,SAAWd,GAAgBA,EAC3BoB,cAAeC,UACfC,mBAAoBA,oBAShBC,EAA0C,CAC9CvB,IAAyB,QAApBwB,EAAA,OAAAC,qBAAAA,kBAAAA,WAAYC,gBAAQ,IAAAF,OAAA,EAAAA,EAAEG,KAC3BC,UAAW,GACXC,cAAe,YAQXC,EAA8B,CAClC9B,IAAyB,QAApB+B,EAAA,OAAAN,qBAAAA,kBAAAA,WAAYC,gBAAQ,IAAAK,OAAA,EAAAA,EAAEC,OAC3BC,aAAc,YACdC,cAAe,YAuHjB,SAASpC,EAAoBE,GAE3B,IAAIC,EAASD,EAAIE,MAAM,KAAK,GAExBxD,EAAM,CAAA,EACV,IAAKuD,EACH,OAAOvD,EAGT,IAAIyF,EAAYlC,EAAOC,MAAM,KAC7B,IAAK,IAAIkC,EAAI,EAAGC,EAAMF,EAAU3F,OAAQ4F,EAAIC,EAAKD,IAAK,CAEpD,IAAIE,EAAMH,EAAUC,GAAGlC,MAAM,KAC7BxD,EAAI4F,EAAI,IAAMA,EAAI,EACnB,CACD,OAAO5F,CACT,CCvLA,SAAS6F,EAAQC,GACf,IAAK,IAAIJ,EAAI,EAAGA,EAAI7F,UAAUC,OAAQ4F,IAAK,CACzC,IAAIK,EAASlG,UAAU6F,GACvB,IAAK,IAAIM,KAAOD,EACdD,EAAOE,GAAOD,EAAOC,EAExB,CACD,OAAOF,CACT,CAwHA,IAAIG,EAlGJ,SAASC,EAAMC,EAAWC,GACxB,SAASC,EAAKL,EAAKpG,EAAO0G,GACxB,GAAwB,oBAAbC,SAAX,CAMkC,iBAFlCD,EAAaT,EAAO,CAAA,EAAIO,EAAmBE,IAErBE,UACpBF,EAAWE,QAAU,IAAIC,KAAKA,KAAKC,MAA6B,MAArBJ,EAAWE,UAEpDF,EAAWE,UACbF,EAAWE,QAAUF,EAAWE,QAAQG,eAG1CX,EAAMpB,mBAAmBoB,GACtBjC,QAAQ,uBAAwBS,oBAChCT,QAAQ,QAAS6C,QAEpB,IAAIC,EAAwB,GAC5B,IAAK,IAAIC,KAAiBR,EACnBA,EAAWQ,KAIhBD,GAAyB,KAAOC,GAEE,IAA9BR,EAAWQ,KAWfD,GAAyB,IAAMP,EAAWQ,GAAetD,MAAM,KAAK,KAGtE,OAAQ+C,SAASQ,OACff,EAAM,IAAMG,EAAUa,MAAMpH,EAAOoG,GAAOa,CAtC3C,CAuCF,CA4BD,OAAOpF,OAAOwF,OACZ,CACEZ,IAAKA,EACLa,IA7BJ,SAAclB,GACZ,GAAwB,oBAAbO,YAA6B1G,UAAUC,QAAWkG,GAA7D,CAQA,IAFA,IAAImB,EAAUZ,SAASQ,OAASR,SAASQ,OAAOvD,MAAM,MAAQ,GAC1D4D,EAAM,CAAA,EACD1B,EAAI,EAAGA,EAAIyB,EAAQrH,OAAQ4F,IAAK,CACvC,IAAI2B,EAAQF,EAAQzB,GAAGlC,MAAM,KACzB5D,EAAQyH,EAAMC,MAAM,GAAGC,KAAK,KAEhC,IACE,IAAIC,EAAWhD,mBAAmB6C,EAAM,IAGxC,GAFAD,EAAII,GAAYrB,EAAUsB,KAAK7H,EAAO4H,GAElCxB,IAAQwB,EACV,KAEU,CAAZ,MAAOrH,GAAK,CACf,CAED,OAAO6F,EAAMoB,EAAIpB,GAAOoB,CApBvB,CAqBF,EAMGM,OAAQ,SAAU1B,EAAKM,GACrBD,EACEL,EACA,GACAH,EAAO,CAAE,EAAES,EAAY,CACrBE,SAAU,IAGf,EACDmB,eAAgB,SAAUrB,GACxB,OAAOJ,EAAK0B,KAAKzB,UAAWN,EAAO,CAAA,EAAI+B,KAAKtB,WAAYA,GACzD,EACDuB,cAAe,SAAU1B,GACvB,OAAOD,EAAKL,EAAO,GAAI+B,KAAKzB,UAAWA,GAAYyB,KAAKtB,WACzD,GAEH,CACEA,WAAY,CAAE1G,MAAO6B,OAAOqG,OAAO1B,IACnCD,UAAW,CAAEvG,MAAO6B,OAAOqG,OAAO3B,KAGxC,CAEUD,CApHa,CACrBuB,KAAM,SAAU7H,GAId,MAHiB,MAAbA,EAAM,KACRA,EAAQA,EAAM0H,MAAM,GAAI,IAEnB1H,EAAMmE,QAAQ,mBAAoBS,mBAC1C,EACDwC,MAAO,SAAUpH,GACf,OAAOgF,mBAAmBhF,GAAOmE,QAC/B,2CACAS,mBAEH,GAwG8B,CAAEuD,KAAM,MCtEzC,MAAMC,EAA2C,CAC/CjB,OAAQkB,EACRC,MAAOC,aACPC,QAASC,gBAGLC,EAAkC,CACtCC,GAAI,EACJC,EAAG,IACHC,IAAK,IACLC,EAAG,KACHC,EAAG,MACHC,EAAG,OACHC,EAAG,OACH7H,EAAG,SAEC8H,EAAoB,CACxB,UACA,OACA,SACA,SACA,YAEIC,EAAqB,CACzB,SACA,SACA,WAEA,aACA,WACA,UACA,OACA,SACA,SACA,YAGF,MAAMC,EAeJC,YACEzJ,EACA0J,GAEA,GAjBMtB,KAAM3I,OAAW,GACjB2I,KAAMuB,OAAW,GACjBvB,KAAQwB,SAAW,IAEnBxB,KAAUyB,YAAY,EACtBzB,KAAQ0B,SAAiB,KAGzB1B,KAAIG,KAAsB,IAE1BH,KAAM2B,QAAwB,EAC9B3B,KAAQ4B,SAA8D,OAMxEhK,GAAkB,WAATA,GAA8B,UAATA,GAA6B,YAATA,EAGpD,MAAMF,MACJ,4CAHFsI,KAAK6B,aAAejK,EAOlB0J,GAAWnH,EAASmH,IACtBzH,OAAOmC,QAAQsF,GAASQ,SAAQ,EAAE1D,EAAKpG,MACrCgI,KAAK5B,GAAOpG,CAAK,GAGtB,CACD+J,OACE3D,EACApG,EACAsJ,GAEA,GAAyB,IAArBrJ,UAAUC,OAAc,OAC5B,IAAKS,EAASyF,KAASA,EAAI4D,OACzB,MAAMtK,MAAM,8BAGd,IAAIuK,EAAmD,CAAA,EAEvD,IAAK,IAAInE,EAAI,EAAGA,EAAIqD,EAAmBjJ,OAAQ4F,IAC7CmE,EAAOd,EAAmBrD,IAAMkC,KAAKmB,EAAmBrD,IAGrDlF,EAAY0I,KACfW,EAAcpI,OAAAoE,OAAApE,OAAAoE,OAAA,GAAAgE,GAAWX,IAS3BlD,EAAM8D,EANkC,CACtC9D,MACA/G,OAAQ4K,EAAO5K,OACfmK,SAAUS,EAAOT,SACjBD,OAAQU,EAAOV,SAIjB,MAAMY,EACHF,EAAOR,WAAwBf,EAAeuB,EAAOP,WAAuB,IAAI7C,MAAOuD,UAM1F,GAJA5K,QAAQgB,IAAI,OAAO2J,GACdxJ,EAASX,KACZA,EAAQK,KAAKgK,UAAUrK,IAEC,WAAtBgI,KAAK6B,aAA2B,CAC9BM,EAAc,IACdF,EAA+BrD,QAAU,IAAIC,KAAKsD,IAEtD,IAAIG,EAAY,CAAA,EAChBpB,EAAkBY,SAAS1D,IACpBxF,EAAYqJ,EAAO7D,MACtBkE,EAAUlE,GAAO6D,EAAO7D,GACzB,IAGHiC,EAAQ5B,IAAIL,EAAKpG,EAAMsK,EAGxB,KAAM,CACL,MAGMC,EAAW,CACfC,UAAWxK,EACXyK,eAAgBN,GALD/B,EACfJ,KAAK6B,cAMEa,QAAQtE,EAAKpB,mBAAmB3E,KAAKgK,UAAUE,IACzD,CACF,CACDI,OACEvE,EACAkD,GAEA,GAAyB,IAArBrJ,UAAUC,OAAc,OAC5B,IAAKS,EAASyF,KAASA,EAAI4D,OACzB,MAAMtK,MAAM,8BAGd,IAAIuK,EAAqD,CAAA,EAEzD,IAAK,IAAInE,EAAI,EAAGA,EAAIqD,EAAmBjJ,OAAQ4F,IAC7CmE,EAAOd,EAAmBrD,IAAMkC,KAAKmB,EAAmBrD,IAGrDlF,EAAY0I,KACfW,EAAcpI,OAAAoE,OAAApE,OAAAoE,OAAA,GAAAgE,GAAWX,IAU3B,IAAIsB,EAEJ,GAJAxE,EAAM8D,EANkC,CACtC9D,MACA/G,OAAQ4K,EAAO5K,OACfmK,SAAUS,EAAOT,SACjBD,OAAQU,EAAOV,SAMS,WAAtBvB,KAAK6B,aAA2B,CAGlC,MAAMgB,EAAgBxC,EAAQf,IAAIlB,GAC9BzF,EAASkK,KACP1K,EAAO0K,KACTD,EAAUvK,KAAKC,MAAMuK,IAGvBD,EAAUC,EAEb,KAAM,CACL,MAAMC,EAAW1C,EACfJ,KAAK6B,cAEP,IAAIkB,EAAUnG,mBAAmBkG,EAASE,QAAQ5E,IAClD,GAAIzF,EAASoK,GACX,GAAI5K,EAAO4K,GAAW,CACpB,IAAIE,EAAUpE,KAAKC,MACnB,MAAMoE,EAAiB7K,KAAKC,MAAMyK,GAEhCG,GACAA,EAAeT,gBACfS,EAAeT,eAAiBQ,IAG9BL,EADEM,EAAeV,WAAarK,EAAO+K,EAAeV,WAC1CnK,KAAKC,MAAM4K,EAAeV,WAE1BU,EAAeV,UAG9B,MAECI,EAAUG,CAIf,CAED,OAAOH,CACR,CACDO,OACE/E,EACAkD,GAEA,GAAyB,IAArBrJ,UAAUC,OAAc,OAC5B,IAAKS,EAASyF,KAASA,EAAI4D,OACzB,MAAMtK,MAAM,8BAGd,IAAIuK,EAAmD,CAAA,EAEvD,IAAK,IAAInE,EAAI,EAAGA,EAAIqD,EAAmBjJ,OAAQ4F,IAC7CmE,EAAOd,EAAmBrD,IAAMkC,KAAKmB,EAAmBrD,IAGrDlF,EAAY0I,KACfW,EAAcpI,OAAAoE,OAAApE,OAAAoE,OAAA,GAAAgE,GAAWX,IAW3B,GAFAlD,EAAM8D,EANkC,CACtC9D,MACA/G,OAAQ4K,EAAO5K,OACfmK,SAAUS,EAAOT,SACjBD,OAAQU,EAAOV,SAIS,WAAtBvB,KAAK6B,aAA2B,CAElC,IAAIS,EAAY,CAAA,EAChBpB,EAAkBY,SAAS1D,IACpBxF,EAAYqJ,EAAO7D,MACtBkE,EAAUlE,GAAO6D,EAAO7D,GACzB,IAGmC,IAAlCvE,OAAOuJ,KAAKd,GAAWpK,OACzBmI,EAAQP,OAAO1B,GAEfiC,EAAQP,OAAO1B,EAAKkE,EAGvB,KAAM,CACYlC,EACfJ,KAAK6B,cAEEwB,WAAWjF,EACrB,CACF,CACDkF,SACElF,EACAkD,GAEA,IAAIsB,EAOJ,OALEA,EADEtB,EACQtB,KAAK2C,OAAOvE,EAAKkD,GAEjBtB,KAAK2C,OAAOvE,KAGfwE,CACV,CACDW,OAAOjC,aAEL,MAAMkC,EAAmB,GACnBC,EAAoB,GACpBC,EAAmB,GAEzB,GAA0B,WAAtB1D,KAAK6B,aAA2B,CAElC,MAAMuB,EAAOvJ,OAAOuJ,KAAK/C,EAAQf,OACjCmE,EAAQE,QAAQP,EACjB,KAAM,CACL,MAAMN,EAAW1C,EACfJ,KAAK6B,cAEDuB,EAAOvJ,OAAOuJ,KAAKN,GACzBW,EAAQE,QAAQP,EACjB,CAED,GAAI9B,GAAWnH,EAASmH,GAAU,CAChC,MAAMsC,EAAO/J,OAAOuJ,KAAK9B,GAASpJ,OAC5B2L,EAAwB,QAAlB3G,EAAAoE,EAAQjK,cAAU,IAAA6F,EAAAA,EAAA8C,KAAK3I,OAC7ByM,EAA4B,QAApBrG,EAAA6D,EAAQE,gBAAY,IAAA/D,EAAAA,EAAAuC,KAAKwB,SACjCuC,EAAwB,QAAlBC,EAAA1C,EAAQC,cAAU,IAAAyC,EAAAA,EAAAhE,KAAKuB,OAE/BqC,GAAQ,EAEVH,EAAQ3B,SAASmC,IACXA,EAAIrJ,SAASiJ,EAAMC,IAAUG,EAAIrJ,SAASkJ,EAAQC,IACpDP,EAAOG,KAAKM,EACb,IAEML,GAAQ,EAEbtC,EAAQjK,QAAUiK,EAAQC,SAAWD,EAAQE,SAC/CiC,EAAQ3B,SAASmC,IACXA,EAAIrJ,SAASiJ,EAAMC,IAAUG,EAAIrJ,SAASkJ,EAAQC,IACpDP,EAAOG,KAAKM,EACb,IAEM3C,EAAQjK,QAAUiK,EAAQE,WAAaF,EAAQC,OACxDkC,EAAQ3B,SAASmC,IACXA,EAAIrJ,SAASiJ,EAAMC,IACrBN,EAAOG,KAAKM,EACb,IAEM3C,EAAQE,UAAYF,EAAQC,SAAWD,EAAQjK,QACxDoM,EAAQ3B,SAASmC,IACXA,EAAIrJ,SAASkJ,EAAQC,IACvBP,EAAOG,KAAKM,EACb,KAKD3C,EAAQjK,QAAWiK,EAAQE,UAAaF,EAAQC,QAMzCD,EAAQE,UAAaF,EAAQjK,QAAWiK,EAAQC,QAMhDD,EAAQC,QAAWD,EAAQE,UAAaF,EAAQjK,QACzDoM,EAAQ3B,SAASmC,IACXA,EAAIrJ,SAASmJ,IACfP,EAAOG,KAAKM,EACb,IATHR,EAAQ3B,SAASmC,IACXA,EAAIrJ,SAASkJ,IACfN,EAAOG,KAAKM,EACb,IATHR,EAAQ3B,SAASmC,IACXA,EAAIrJ,SAASiJ,IACfL,EAAOG,KAAKM,EACb,GAgBR,MACCT,EAAOG,QAAQF,GAGjB,IAAIS,EACJ,GAA0B,WAAtBlE,KAAK6B,aAEPqC,EAAU9F,GAAeiC,EAAQf,IAAIlB,OAChC,CACL,MAAM0E,EAAW1C,EACfJ,KAAK6B,cAEPqC,EAAU9F,GAAe0E,EAASE,QAAQ5E,EAC3C,CAED,GAAIoF,EAAOtL,OAAS,EAElB,IAAK,IAAI4F,EAAI,EAAGA,EAAI0F,EAAOtL,OAAQ4F,IAAK,CACtC,IAAImG,EAAMT,EAAO1F,IAGHqG,EAAcD,EAAOD,KAMjCP,EAAOC,KAAKM,EAEf,CAGH,OAAOP,CACR,CACDU,SACE9C,GAEA,IAAIoC,EAAmB,GAEvB,GAA0B,WAAtB1D,KAAK6B,aAA2B,CAElC,IAAIS,EAAY,CAAA,EAEZhB,GACFoC,EAAS,IAAI1D,KAAKuD,OAAOjC,IACzBJ,EAAkBY,SAAS1D,IACpBxF,EAAY0I,EAAQlD,MACvBkE,EAAUlE,GAAOkD,EAAQlD,GAC1B,KAGHsF,EAAS,IAAI1D,KAAKuD,UAEhBG,EAAOxL,OAAS,IACoB,IAAlC2B,OAAOuJ,KAAKd,GAAWpK,OACzBwL,EAAO5B,SAASmC,GAAQ5D,EAAQP,OAAOmE,KAEvCP,EAAO5B,SAASmC,GAAQ5D,EAAQP,OAAOmE,EAAK3B,KAGjD,KAAM,CACL,MAAMQ,EAAW1C,EACfJ,KAAK6B,cAEHP,GACFoC,EAAS,IAAI1D,KAAKuD,OAAOjC,IACrBoC,EAAOxL,OAAS,GAClBwL,EAAO5B,SAASmC,GAAQnB,EAASO,WAAWY,MAG9CnB,EAASuB,OAEZ,CACF,EAIH,SAASnC,EAASoC,GAChB,IAAIC,EAAiB,GAgBrB,OAdID,EAAO9C,SAASQ,QACdsC,EAAOjN,OAAO2K,SAChBuC,GAAUD,EAAOjN,OAASiN,EAAO9C,UAGnC+C,GAAUD,EAAOlG,IAEbkG,EAAO/C,OAAOS,SAChBuC,GAAUD,EAAO9C,SAAW8C,EAAO/C,SAGrCgD,EAASD,EAAOlG,IAAI4D,OAGfuC,CACT,CAGA,SAASJ,EAAcF,GACrB,IAAIrB,GAAmB,EAEvB,GAAIjK,EAASsL,IACX,GAAI9L,EAAO8L,GAAM,CACf,MAAMO,EAAOnM,KAAKC,MAAM2L,GACpBO,EAAK/B,gBAAkB+B,EAAK/B,eAAiB5D,KAAKC,QACpD8D,GAAU,EAEb,OAEDA,GAAU,EAGZ,OAAOA,CACT,gBC3fqB,CAAC6B,EAAaC,IAC1BD,EAAI7I,MAAM8I,GAAMxM,OAAQ,sBHmGjC,SACEyM,EACArD,GAEyB,IAArBrJ,UAAUC,QACZd,EAAgB,wBAElB,IAAIuE,EAAiB,GACjBkC,EAAsB,GACtB+G,EAA2B3H,EAe/B,GAbIqE,IACFsD,EAAW/K,OAAAoE,OAAApE,OAAAoE,OAAA,GAAA2G,GAAQtD,IAG6B,oBAA9CzH,OAAOC,UAAUC,SAASC,KAAK2K,GACjC9K,OAAOmC,QAAQ2I,GAAW7C,SAAQ,EAAE1D,EAAKpG,MACvC,IAAI6M,EAAQzG,EAAM,IAAMvB,EAAc+H,EAAIrH,eAAevF,GACzD6F,EAAU8F,KAAKkB,EAAM,IAGvBrN,QAAQgD,KAAK,0BAGXoK,EAAIlJ,IAAId,SAAS,KAAM,CACzB,IAAIkK,EAAmBF,EAAIlJ,IAAIE,MAAM,KAUrC,GATApE,QAAQgB,IAAIsM,GACRA,EAAO,GAAGlK,SAAS,OACrBe,EACEmJ,EAAO,GAAK,IAAMA,EAAO,GAAGC,UAAU,EAAGD,EAAO,GAAGE,YAAY,MAE5DJ,EAAItH,UAAU0E,SACjB4C,EAAItH,UAAYwH,EAAO,GAAGC,UAAUD,EAAO,GAAGE,YAAY,QAG1DnH,EAAU3F,OAAS,EAAG,CACxB,MAAM+M,EAA4BzJ,EAAoBG,GAChDuJ,EAAiCrL,OAAAoE,OAAApE,OAAAoE,OAAA,GAAAgH,GAAiBN,GAClDQ,EAAyB,GAE/BtL,OAAOmC,QAAQkJ,GAAcpD,SAAQ,EAAE1D,EAAKpG,MAC1C,IAAI6M,EAAQzG,EAAM,IAAMvB,EAAc+H,EAAIrH,eAAevF,GACzDmN,EAAaxB,KAAKkB,EAAM,IAE1BrN,QAAQgB,IAAI2M,GACZxJ,EAASmJ,EAAO,GAAK,IAAMK,EAAaxF,KAAK,KAAOiF,EAAItH,SACzD,MACC3B,EAASiJ,EAAIlJ,IAAMkJ,EAAItH,SAE1B,MACKsH,EAAIlJ,IAAId,SAAS,OACdgK,EAAItH,UAAU0E,SACjB4C,EAAItH,UAAYsH,EAAIlJ,IAAIqJ,UAAUH,EAAIlJ,IAAIsJ,YAAY,OAExDJ,EAAIlJ,IAAMkJ,EAAIlJ,IAAIqJ,UAAU,EAAGH,EAAIlJ,IAAIsJ,YAAY,OAGnDrJ,EADEkC,EAAU3F,OAAS,EACZ0M,EAAIlJ,IAAM,IAAMmC,EAAU8B,KAAK,KAAOiF,EAAItH,UAE1CsH,EAAIlJ,IAAMkJ,EAAItH,UAI3B,OAAO3B,CACT,oBDlFA,SAAyB9D,GAClBsD,EAAatD,IAChBT,EAAgB,GAAG,iCAErB,IAAIgO,EAA0B,GAC9B,GAAInN,UAAUC,OAAS,GAAKL,EAAOK,OAAS,EAC1C,IAAK,IAAI4F,EAAI,EAAGA,EAAIjG,EAAOK,OAAQ4F,IAAK,CACtC,IAAImG,EAAMpM,EAAOiG,GACjBsH,EAAOzB,KAAKpJ,EAAQ0J,GACrB,CAEH,OAAOmB,CACT,uBAEA,SAA4BvN,EAAcwN,GACnClK,EAAatD,IAChBT,EAAgB,GAAG,oCAErB,IAAIsM,EAA4B,GAChC,GAAIzL,UAAUC,OAAS,EAAG,CACxB,IAAIoN,EAA+B,GAC/BC,EAA4B,GAEhC,IAAK,IAAIzH,EAAI,EAAGA,EAAIjG,EAAOK,OAAQ4F,IAAK,CACtC,IAAI0H,EAAQ1H,EACR9F,EAAQH,EAAOiG,GACflG,EAAqB2C,EAAQvC,GAEjCuN,EAAO5B,KAAK,CAAE6B,QAAOxN,QAAOJ,SAExByN,KACiB,WAAfA,GAA4B,CAAC,MAAM,SAASzK,SAAShD,IAE/CyN,IAAezN,IADvB0N,EAAU3B,KAAK,CAAE6B,QAAOxN,QAAOJ,SAMpC,CAGC8L,EADE2B,EACO,IAAIC,GAEJ,IAAIC,EAEhB,CAED,OAAO7B,CACT,qBAEA,SAA0B7L,GACnBqD,EAAcrD,IACjBT,EAAgB,GAAG,kCAErB,IAAIsM,EAAyB,GAC7B,GAAIzL,UAAUC,OAAS,EAErB,IAAK,MAAMkG,KAAOvG,EAChB,GAAIgC,OAAO4L,eAAezL,KAAKnC,EAAQuG,GAAM,CAC3C,IAAI6F,EAAMpM,EAAOuG,GACjBsF,EAAOC,KAAKpJ,EAAQ0J,GACrB,CAIL,OAAOP,CACT,wBAEA,SAA6B7L,EAAewN,GACrCnK,EAAcrD,IACjBT,EAAgB,GAAG,qCAErB,IAAIsM,EAA4B,GAChC,GAAIzL,UAAUC,OAAS,EAAG,CAExB,IAAIoN,EAA+B,GAC/BC,EAA4B,GAEhC,IAAK,MAAMnH,KAAOvG,EAEhB,GAAIgC,OAAO4L,eAAezL,KAAKnC,EAAQuG,GAAvC,CACE,IAAIpG,EAAQH,EAAOuG,GACfxG,EAAO2C,EAAQvC,GAEnBuN,EAAO5B,KAAK,CAAEvF,MAAKpG,QAAOJ,SAEtByN,IACiB,WAAfA,GAA4B,CAAC,MAAM,SAASzK,SAAShD,IAE/CyN,IAAezN,IADvB0N,EAAU3B,KAAK,CAAEvF,MAAKpG,QAAOJ,QAOlC,MAID8L,EADE2B,EACO,IAAIC,GAEJ,IAAIC,EAEhB,CAED,OAAO7B,CACT,6BCjIA,SACEtF,EACAkD,GAEA,IAAIoE,EAAY,CAAA,EACZd,EAA2BpH,EAC3BmI,EAAiB,GACjBhK,EAAiB,GAarB,GAX4B,iBAAjB1D,UAAU,GACnB0N,EAAS1N,UAAU,GACc,iBAAjBA,UAAU,KAC1B2M,EAAG/K,OAAAoE,OAAApE,OAAAoE,OAAA,GAAQT,GAAWvF,UAAU,KAGN,iBAAjBA,UAAU,KACnB2M,EAAG/K,OAAAoE,OAAApE,OAAAoE,OAAA,GAAQT,GAAWvF,UAAU,KAElC0D,EAASY,EAAcqI,EAAIhH,eAAegH,EAAIlJ,KAE1CC,EAAOf,SAAS,KAAM,CACxB,IAAIkK,EAAmBnJ,EAAOC,MAAM,KAChCkJ,EAAO,GAAGlK,SAAS,OACrBe,EAAS,IAAMmJ,EAAO,GAAGC,UAAU,EAAGD,EAAO,GAAGE,YAAY,MAE/D,CAGD,OAFAU,EAAYpK,EAAiBsJ,EAAIjH,cAAchC,GAE3CgK,EACKD,EAAUC,GAGZD,CACT,sOEiaA,SAAoB9N,EAAmB0J,GAErC,OAAO,IAAIF,EAAWxJ,EAAK0J,EAC7B"}