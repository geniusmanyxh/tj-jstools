{"version":3,"file":"index.js","sources":["../../src/common/paramUtils.ts","../../src/type_tool/basic/index.ts","../../src/type_tool/numDel/index.ts","../../src/type_tool/objDel/index.ts","../../src/type_tool/complexFun/index.ts","../../src/index.ts"],"sourcesContent":["\r\nfunction paramsNullError (prefix:string = '',customTxt?:string) {\r\n  let deaInfo = '参数不能为空！'\r\n  if (prefix) {\r\n    deaInfo = prefix + deaInfo\r\n  }\r\n  if (customTxt) {\r\n    deaInfo = customTxt\r\n  }\r\n  console.error(deaInfo)\r\n  throw Error(deaInfo)\r\n}\r\n\r\nexport {paramsNullError}","import {paramsNullError} from '../../common/paramUtils'\r\n\r\nconst isBasicType = function isType(type: string) {\r\n  const params = String(type).toLocaleLowerCase()\r\n  return function basicType(value:unknown): boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${type}方法的`)\r\n    }\r\n\r\n    return typeof value === params\r\n  }\r\n}\r\n\r\nconst isBoolean = isBasicType('Boolean')\r\nconst isNumber = isBasicType('Number')\r\nconst isString = isBasicType('String')\r\nconst isUndefined = isBasicType('Undefined')\r\nconst isSymbol = isBasicType('Symbol')\r\nconst isBigint = isBasicType('Bigint')\r\nexport {\r\n  isBoolean,\r\n  isNumber,\r\n  isString,\r\n  isUndefined,\r\n  isSymbol,\r\n  isBigint\r\n}","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nfunction isNumType(name:string,type:string) {\r\n\r\n  return function (value:unknown):boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${name}方法的`)\r\n    } \r\n    let flag = typeof value === 'number'\r\n    return (flag && Number[`is${type}`](value))\r\n  }\r\n}\r\n\r\nfunction isFloat(params: unknown): boolean {\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isFloat方法的`)\r\n  }\r\n  let flag = typeof params === 'number'\r\n  let y = String(params).indexOf('.') + 1 // 获取小数点后的个数\r\n\r\n  return (flag && (y>0))\r\n}\r\n\r\nfunction isInfinite(params:unknown):boolean{\r\n  if (arguments.length === 0) {\r\n    paramsNullError(`isInfinite方法的`)\r\n  } \r\n  let flag = typeof params === 'number'\r\n  return (flag && !Number.isFinite(params))\r\n}\r\n\r\nconst isInt = isNumType('Int','Integer')\r\nconst isFinite = isNumType('Finite','Finite')\r\nconst isNaN = isNumType('NaN','NaN')\r\n\r\nexport {isFloat,isInt,isFinite,isNaN,isInfinite}","import { paramsNullError } from '../../common/paramUtils'\r\n\r\nconst objTypeMap = { \r\n  nullT:'[object Null]',\r\n  ObjectT:'[object Object]',\r\n  ArrayT:'[object Array]',\r\n  DateT:'[object Date]',\r\n  FunctionT:'[object Function]',\r\n}\r\n \r\n\r\nfunction isObjType(name:string,type:string) {\r\n\r\n  return function (value:unknown):boolean {\r\n    if (arguments.length === 0) {\r\n      paramsNullError(`is${name}方法的`)\r\n    } \r\n    let pType = Object.prototype.toString.call(value)    \r\n    return pType === type\r\n  }\r\n}\r\n\r\nconst isNull = isObjType('Null',objTypeMap.nullT)\r\nconst isArray = isObjType('Array',objTypeMap.ArrayT)\r\nconst isObject = isObjType('Object',objTypeMap.ObjectT)\r\nconst isDate = isObjType('Date',objTypeMap.DateT)\r\nconst isFunction = isObjType('Function',objTypeMap.FunctionT)\r\n\r\nexport {isNull,isArray,isDate,isFunction,isObject}\r\n\r\n","import * as numT from '../numDel'\r\nimport * as objT from '../objDel'\r\nimport {paramsNullError} from '../../common/paramUtils'\r\n\r\ntype returnTypeStr =\r\n  | 'string'\r\n  | 'bigint'\r\n  | 'boolean'\r\n  | 'symbol'\r\n  | 'undefined'\r\n  | 'object'\r\n  | 'function'\r\n  | 'array'\r\n  | 'object'\r\n  | 'date'\r\n  | 'null'\r\n  | 'int'\r\n  | 'float'\r\n  | 'infinite'\r\n  | 'NaN'\r\n\r\ntype arrayTypeDetail = {\r\n  index: string | number\r\n  value: any\r\n  type: returnTypeStr\r\n}\r\n\r\ntype objectTypeDetail = {\r\n  key: string\r\n  value: any\r\n  type: returnTypeStr\r\n}\r\n\r\n// 定义一个typeof可以直接判断出来的单一类型数组\r\nlet simpleTypeArr = [\r\n  'string',\r\n  'bigint',\r\n  'boolean',\r\n  'symbol',\r\n  'undefined',\r\n  'function',\r\n]\r\n\r\nfunction getType(params: unknown): returnTypeStr {\r\n  if (arguments.length === 0) {\r\n    console.warn('getType方法没有接收到参数,返回的类型为undefined')\r\n    return 'undefined'\r\n  }\r\n  let rtnStr: returnTypeStr | 'number' = 'string'\r\n  let typeStr: returnTypeStr | 'number' = typeof params\r\n  let typeFlag = simpleTypeArr.includes(typeStr)\r\n\r\n  if (typeFlag) {\r\n    rtnStr = typeStr\r\n  } else {\r\n    if (typeStr === 'number') {\r\n      if (numT.isInt(params)) {\r\n        rtnStr = 'int'\r\n      } else if (numT.isFloat(params)) {\r\n        rtnStr = 'float'\r\n      } else if (numT.isNaN(params)) {\r\n        rtnStr = 'NaN'\r\n      } else if (numT.isInfinite(params)) {\r\n        rtnStr = 'infinite'\r\n      }\r\n    } else if (typeStr === 'object') {\r\n      if (objT.isNull(params)) {\r\n        rtnStr = 'null'\r\n      } else if (objT.isObject(params)) {\r\n        rtnStr = 'object'\r\n      } else if (objT.isArray(params)) {\r\n        rtnStr = 'array'\r\n      } else if (objT.isFunction(params)) {\r\n        rtnStr = 'function'\r\n      } else if (objT.isDate(params)) {\r\n        rtnStr = 'date'\r\n      }\r\n    }\r\n  }\r\n\r\n  return rtnStr as returnTypeStr\r\n}\r\n\r\nfunction getArrayAllType(params: any[]): returnTypeStr[] {\r\n  if (!objT.isArray(params)) {\r\n    paramsNullError(\"\",\"getArrayAllType方法接收的参数应该是一个数组\")\r\n  }\r\n  let rtnArr: returnTypeStr[] = []\r\n  if (arguments.length > 0 && params.length > 0) {\r\n    for (let i = 0; i < params.length; i++) {\r\n      let val = params[i]\r\n      rtnArr.push(getType(val))\r\n    }\r\n  } \r\n  return rtnArr\r\n}\r\n\r\nfunction getArrayTypeDetail(params: any[],selectType?: returnTypeStr | 'number'): arrayTypeDetail[] {\r\n  if (!objT.isArray(params)) {\r\n    paramsNullError(\"\",\"getArrayTypeDetail方法接收的参数应该是一个数组\")\r\n  }\r\n  let resArr: arrayTypeDetail[] = []\r\n  if (arguments.length > 0) {\r\n    let selectArr: arrayTypeDetail[] = []\r\n    let allArr: arrayTypeDetail[] = []\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      let index = i\r\n      let value = params[i]\r\n      let type:returnTypeStr = getType(value)\r\n\r\n      allArr.push({ index, value, type })\r\n\r\n      if (selectType) {\r\n        if (selectType === 'number' && (['int','float'].includes(type))) {\r\n          selectArr.push({ index, value, type })\r\n        } else if(selectType === type) {\r\n          selectArr.push({ index, value, type })\r\n        }\r\n        continue\r\n      }\r\n    }\r\n\r\n    if (selectType) {\r\n      resArr = [...selectArr]\r\n    } else {\r\n      resArr = [...allArr]\r\n    }\r\n  }\r\n\r\n  return resArr\r\n}\r\n\r\nfunction getObjectAllType(params: object):returnTypeStr[] {\r\n  if (!objT.isObject(params)) {\r\n    paramsNullError(\"\",\"getObjectAllType方法接收的参数应该是一个对象\")\r\n  }\r\n  let resArr:returnTypeStr[] = []\r\n  if (arguments.length > 0) {\r\n\r\n    for (const key in params) {\r\n      if (Object.hasOwnProperty.call(params, key)) {\r\n        let val = params[key]\r\n        resArr.push(getType(val))\r\n      }\r\n    }\r\n  }\r\n\r\n  return resArr\r\n}\r\n\r\nfunction getObjectTypeDetail(params:object, selectType?:returnTypeStr | 'number'):objectTypeDetail[] {\r\n  if (!objT.isObject(params)) {\r\n    paramsNullError(\"\",\"getObjectTypeDetail方法接收的参数应该是一个对象\")\r\n  }\r\n  let resArr:objectTypeDetail[] = []\r\n  if (arguments.length > 0) {\r\n   \r\n    let selectArr:objectTypeDetail[] = []\r\n    let allArr:objectTypeDetail[] = []\r\n\r\n    for (const key in params) {\r\n        \r\n      if (Object.hasOwnProperty.call(params, key)) {\r\n        let value = params[key]\r\n        let type = getType(value)\r\n\r\n        allArr.push({ key, value, type })\r\n\r\n        if (selectType) {\r\n          if (selectType === 'number' && (['int','float'].includes(type))) {\r\n            selectArr.push({ key, value, type })\r\n          } else if(selectType === type) {\r\n            selectArr.push({ key, value, type })\r\n          }\r\n        }\r\n        continue\r\n        \r\n      }\r\n    }\r\n   \r\n    if (selectType) {\r\n      resArr = [...selectArr]\r\n    } else {\r\n      resArr = [...allArr]\r\n    }\r\n  }\r\n \r\n  return resArr\r\n}\r\n\r\nexport { getType, getArrayAllType, getArrayTypeDetail, getObjectAllType, getObjectTypeDetail }\r\n","// import * as tjType from './type_tool'\r\n// export default {tjType}\r\nimport {\r\n  isBoolean,\r\n  isNumber,\r\n  isString,\r\n  isSymbol,\r\n  isUndefined,\r\n  isBigint,\r\n} from './type_tool/basic'\r\nimport { isFloat, isInt, isFinite, isNaN, isInfinite } from './type_tool/numDel'\r\nimport { isNull, isArray, isDate, isFunction, isObject } from './type_tool/objDel'\r\nimport {getType, getArrayAllType, getArrayTypeDetail, getObjectAllType, getObjectTypeDetail} from './type_tool/complexFun'\r\n\r\nconst tjType = {\r\n  getType,\r\n  getArrayAllType,\r\n  getArrayTypeDetail,\r\n  getObjectAllType,\r\n  getObjectTypeDetail,\r\n  isBoolean,\r\n  isNumber,\r\n  isString,\r\n  isSymbol,\r\n  isUndefined,\r\n  isBigint,\r\n  isInt,\r\n  isFloat,\r\n  isNaN,\r\n  isFinite,\r\n  isInfinite,\r\n  isNull,\r\n  isArray,\r\n  isDate,\r\n  isFunction,\r\n  isObject,\r\n}\r\n\r\nexport {tjType} \r\n\r\n\r\n"],"names":["paramsNullError","prefix","customTxt","deaInfo","console","error","Error","isBasicType","type","params","String","toLocaleLowerCase","value","arguments","length","isBoolean","isNumber","isString","isUndefined","isSymbol","isBigint","isNumType","name","flag","Number","isFloat","y","indexOf","isInfinite","isFinite","isInt","isNaN","objTypeMap","isObjType","pType","Object","prototype","toString","call","isNull","isArray","isObject","isDate","isFunction","simpleTypeArr","getType","warn","rtnStr","typeStr","typeFlag","includes","numT.isInt","numT.isFloat","numT.isNaN","numT.isInfinite","objT.isNull","objT.isObject","objT.isArray","objT.isFunction","objT.isDate","tjType","getArrayAllType","rtnArr","i","val","push","getArrayTypeDetail","selectType","resArr","selectArr","allArr","index","getObjectAllType","key","hasOwnProperty","getObjectTypeDetail"],"mappings":"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"}